--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Transactions.TransactionCompletedEventHandler;
limited with NetFrameworkBase.System.Transactions.IPromotableSinglePhaseNotification;
limited with NetFrameworkBase.System.Guid;
limited with NetFrameworkBase.System.Transactions.IEnlistmentNotification;
limited with NetFrameworkBase.System.Transactions.EnlistmentOptions;
limited with NetFrameworkBase.System.Transactions.ISinglePhaseNotification;
limited with NetFrameworkBase.System.Exception_x;
limited with NetFrameworkBase.System.Transactions.DependentCloneOption;
limited with NetFrameworkBase.System.Transactions.TransactionInformation;
limited with NetFrameworkBase.System.Transactions.IsolationLevel;
limited with NetFrameworkBase.System.Transactions.Enlistment;
limited with NetFrameworkBase.System.Transactions.DependentTransaction;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Transactions.Transaction is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Current
      return NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr;
      
      function GetHashCode
      (
         this : in out Transaction.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Equals
      (
         this : in out Transaction.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function op_Equality
      (
         x : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr; 
         y : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      function "="(x : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr; y : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr) return NetFrameworkBase.Boolean renames op_Equality;
      
      function op_Inequality
      (
         x : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr; 
         y : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      procedure add_TransactionCompleted
      (
         this : in out Transaction.Kind;
         value : NetFrameworkBase.System.Transactions.TransactionCompletedEventHandler.Kind_Ptr
      );
      
      procedure remove_TransactionCompleted
      (
         this : in out Transaction.Kind;
         value : NetFrameworkBase.System.Transactions.TransactionCompletedEventHandler.Kind_Ptr
      );
      
      procedure Dispose
      (
         this : in out Transaction.Kind
      );
      
      function EnlistPromotableSinglePhase
      (
         this : in out Transaction.Kind;
         promotableSinglePhaseNotification : NetFrameworkBase.System.Transactions.IPromotableSinglePhaseNotification.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      procedure Current
      (
         value : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr
      )
      ;
      
      function TransactionInformation
      (
         this : in out Transaction.Kind
      )
      return NetFrameworkBase.System.Transactions.TransactionInformation.Kind_Ptr;
      
      function IsolationLevel
      (
         this : in out Transaction.Kind
      )
      return NetFrameworkBase.System.Transactions.IsolationLevel.Kind;
      
      function PromoterType
      (
         this : in out Transaction.Kind
      )
      return NetFrameworkBase.System.Guid.Kind_Ptr;
      
      function GetPromotedToken
      (
         this : in out Transaction.Kind
      )
      return NetFrameworkBase.Byte_Array;
      
      function EnlistDurable
      (
         this : in out Transaction.Kind;
         resourceManagerIdentifier : NetFrameworkBase.System.Guid.Kind_Ptr; 
         enlistmentNotification : NetFrameworkBase.System.Transactions.IEnlistmentNotification.Kind_Ptr; 
         enlistmentOptions : NetFrameworkBase.System.Transactions.EnlistmentOptions.Kind
      )
      return NetFrameworkBase.System.Transactions.Enlistment.Kind_Ptr;
      
      function EnlistDurable
      (
         this : in out Transaction.Kind;
         resourceManagerIdentifier : NetFrameworkBase.System.Guid.Kind_Ptr; 
         singlePhaseNotification : NetFrameworkBase.System.Transactions.ISinglePhaseNotification.Kind_Ptr; 
         enlistmentOptions : NetFrameworkBase.System.Transactions.EnlistmentOptions.Kind
      )
      return NetFrameworkBase.System.Transactions.Enlistment.Kind_Ptr;
      
      procedure Rollback
      (
         this : in out Transaction.Kind
      );
      
      procedure Rollback
      (
         this : in out Transaction.Kind;
         e : NetFrameworkBase.System.Exception_x.Kind_Ptr
      );
      
      function EnlistVolatile
      (
         this : in out Transaction.Kind;
         enlistmentNotification : NetFrameworkBase.System.Transactions.IEnlistmentNotification.Kind_Ptr; 
         enlistmentOptions : NetFrameworkBase.System.Transactions.EnlistmentOptions.Kind
      )
      return NetFrameworkBase.System.Transactions.Enlistment.Kind_Ptr;
      
      function EnlistVolatile
      (
         this : in out Transaction.Kind;
         singlePhaseNotification : NetFrameworkBase.System.Transactions.ISinglePhaseNotification.Kind_Ptr; 
         enlistmentOptions : NetFrameworkBase.System.Transactions.EnlistmentOptions.Kind
      )
      return NetFrameworkBase.System.Transactions.Enlistment.Kind_Ptr;
      
      function Clone
      (
         this : in out Transaction.Kind
      )
      return NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr;
      
      function DependentClone
      (
         this : in out Transaction.Kind;
         cloneOption : NetFrameworkBase.System.Transactions.DependentCloneOption.Kind
      )
      return NetFrameworkBase.System.Transactions.DependentTransaction.Kind_Ptr;
      
      function EnlistPromotableSinglePhase
      (
         this : in out Transaction.Kind;
         promotableSinglePhaseNotification : NetFrameworkBase.System.Transactions.IPromotableSinglePhaseNotification.Kind_Ptr; 
         promoterType : NetFrameworkBase.System.Guid.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function PromoteAndEnlistDurable
      (
         this : in out Transaction.Kind;
         resourceManagerIdentifier : NetFrameworkBase.System.Guid.Kind_Ptr; 
         promotableNotification : NetFrameworkBase.System.Transactions.IPromotableSinglePhaseNotification.Kind_Ptr; 
         enlistmentNotification : NetFrameworkBase.System.Transactions.ISinglePhaseNotification.Kind_Ptr; 
         enlistmentOptions : NetFrameworkBase.System.Transactions.EnlistmentOptions.Kind
      )
      return NetFrameworkBase.System.Transactions.Enlistment.Kind_Ptr;
      
      procedure SetDistributedTransactionIdentifier
      (
         this : in out Transaction.Kind;
         promotableNotification : NetFrameworkBase.System.Transactions.IPromotableSinglePhaseNotification.Kind_Ptr; 
         distributedTransactionIdentifier : NetFrameworkBase.System.Guid.Kind_Ptr
      );
      
end;
