--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.IO.Pipes.PipeStream;
limited with NetFrameworkBase.System.Threading.CancellationToken;
limited with NetFrameworkBase.System.IO.Pipes.PipeDirection;
limited with NetFrameworkBase.System.IO.Pipes.PipeOptions;
limited with NetFrameworkBase.System.Security.Principal.TokenImpersonationLevel;
limited with NetFrameworkBase.System.IO.HandleInheritability;
limited with NetFrameworkBase.System.IO.Pipes.PipeAccessRights;
limited with NetFrameworkBase.Microsoft.Win32.SafeHandles.SafePipeHandle;
limited with NetFrameworkBase.System.Threading.Tasks.Task_x;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream is
   
   type Kind is new NetFrameworkBase.System.IO.Pipes.PipeStream.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      procedure Connect
      (
         this : in out NamedPipeClientStream.Kind
      );
      
      procedure Connect
      (
         this : in out NamedPipeClientStream.Kind;
         timeout : NetFrameworkBase.Int32
      );
      
      function ConnectAsync
      (
         this : in out NamedPipeClientStream.Kind
      )
      return NetFrameworkBase.System.Threading.Tasks.Task_x.Kind_Ptr;
      
      function ConnectAsync
      (
         this : in out NamedPipeClientStream.Kind;
         timeout : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Threading.Tasks.Task_x.Kind_Ptr;
      
      function ConnectAsync
      (
         this : in out NamedPipeClientStream.Kind;
         cancellationToken : NetFrameworkBase.System.Threading.CancellationToken.Kind_Ptr
      )
      return NetFrameworkBase.System.Threading.Tasks.Task_x.Kind_Ptr;
      
      function ConnectAsync
      (
         this : in out NamedPipeClientStream.Kind;
         timeout : NetFrameworkBase.Int32; 
         cancellationToken : NetFrameworkBase.System.Threading.CancellationToken.Kind_Ptr
      )
      return NetFrameworkBase.System.Threading.Tasks.Task_x.Kind_Ptr;
      
      function NumberOfServerInstances
      (
         this : in out NamedPipeClientStream.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Constructor
      (
         pipeName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
      function Constructor
      (
         serverName : NetFrameworkBase.BSTR;
         pipeName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
      function Constructor
      (
         serverName : NetFrameworkBase.BSTR;
         pipeName : NetFrameworkBase.BSTR;
         direction : NetFrameworkBase.System.IO.Pipes.PipeDirection.Kind
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
      function Constructor
      (
         serverName : NetFrameworkBase.BSTR;
         pipeName : NetFrameworkBase.BSTR;
         direction : NetFrameworkBase.System.IO.Pipes.PipeDirection.Kind;
         options : NetFrameworkBase.System.IO.Pipes.PipeOptions.Kind
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
      function Constructor
      (
         serverName : NetFrameworkBase.BSTR;
         pipeName : NetFrameworkBase.BSTR;
         direction : NetFrameworkBase.System.IO.Pipes.PipeDirection.Kind;
         options : NetFrameworkBase.System.IO.Pipes.PipeOptions.Kind;
         impersonationLevel : NetFrameworkBase.System.Security.Principal.TokenImpersonationLevel.Kind
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
      function Constructor
      (
         serverName : NetFrameworkBase.BSTR;
         pipeName : NetFrameworkBase.BSTR;
         direction : NetFrameworkBase.System.IO.Pipes.PipeDirection.Kind;
         options : NetFrameworkBase.System.IO.Pipes.PipeOptions.Kind;
         impersonationLevel : NetFrameworkBase.System.Security.Principal.TokenImpersonationLevel.Kind;
         inheritability : NetFrameworkBase.System.IO.HandleInheritability.Kind
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
      function Constructor
      (
         serverName : NetFrameworkBase.BSTR;
         pipeName : NetFrameworkBase.BSTR;
         desiredAccessRights : NetFrameworkBase.System.IO.Pipes.PipeAccessRights.Kind;
         options : NetFrameworkBase.System.IO.Pipes.PipeOptions.Kind;
         impersonationLevel : NetFrameworkBase.System.Security.Principal.TokenImpersonationLevel.Kind;
         inheritability : NetFrameworkBase.System.IO.HandleInheritability.Kind
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
      function Constructor
      (
         direction : NetFrameworkBase.System.IO.Pipes.PipeDirection.Kind;
         isAsync : NetFrameworkBase.Boolean;
         isConnected : NetFrameworkBase.Boolean;
         safePipeHandle : NetFrameworkBase.Microsoft.Win32.SafeHandles.SafePipeHandle.Kind_Ptr
      )
      return NetFrameworkBase.System.IO.Pipes.NamedPipeClientStream.Kind_Ptr;
      
end;
