--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with NetFrameworkBase.System.ComponentModel.Design.Serialization.ResolveNameEventHandler;
limited with NetFrameworkBase.System.EventHandler;
limited with NetFrameworkBase.System.ComponentModel.Design.Serialization.IDesignerSerializationProvider;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Collections.ICollection;
limited with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.ComponentModel.Design.Serialization.ContextStack;
limited with NetFrameworkBase.System.ComponentModel.PropertyDescriptorCollection;
with NetFrameworkWin32;
with NetFrameworkAdaRuntime;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.ComponentModel.Design.Serialization.IDesignerSerializationManager is
   
   type Kind is interface and NetFrameworkWin32.IUnknown;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array (Natural range <>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function get_Context
      (
         this : in out IDesignerSerializationManager.Kind;
         RetVal : access NetFrameworkBase.System.ComponentModel.Design.Serialization.ContextStack.Kind_Ptr
      ) return HResult is abstract;
      
      function get_Properties
      (
         this : in out IDesignerSerializationManager.Kind;
         RetVal : access NetFrameworkBase.System.ComponentModel.PropertyDescriptorCollection.Kind_Ptr
      ) return HResult is abstract;
      
      function add_ResolveName
      (
         this : in out IDesignerSerializationManager.Kind;
         value : NetFrameworkBase.System.ComponentModel.Design.Serialization.ResolveNameEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_ResolveName
      (
         this : in out IDesignerSerializationManager.Kind;
         value : NetFrameworkBase.System.ComponentModel.Design.Serialization.ResolveNameEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function add_SerializationComplete
      (
         this : in out IDesignerSerializationManager.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_SerializationComplete
      (
         this : in out IDesignerSerializationManager.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function AddSerializationProvider
      (
         this : in out IDesignerSerializationManager.Kind;
         provider : NetFrameworkBase.System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.Kind_Ptr
      ) return HResult is abstract;
      
      function CreateInstance
      (
         this : in out IDesignerSerializationManager.Kind;
         type_x : NetFrameworkBase.System.Type_x.Kind_Ptr;
         arguments : NetFrameworkBase.System.Collections.ICollection.Kind_Ptr;
         name : NetFrameworkBase.BSTR;
         addToContainer : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function GetInstance
      (
         this : in out IDesignerSerializationManager.Kind;
         name : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function GetName
      (
         this : in out IDesignerSerializationManager.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function GetSerializer
      (
         this : in out IDesignerSerializationManager.Kind;
         objectType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         serializerType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function GetType
      (
         this : in out IDesignerSerializationManager.Kind;
         typeName : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.System.Type_x.Kind_Ptr
      ) return HResult is abstract;
      
      function RemoveSerializationProvider
      (
         this : in out IDesignerSerializationManager.Kind;
         provider : NetFrameworkBase.System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.Kind_Ptr
      ) return HResult is abstract;
      
      function ReportError
      (
         this : in out IDesignerSerializationManager.Kind;
         errorInformation : NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function SetName
      (
         this : in out IDesignerSerializationManager.Kind;
         instance_x : NetFrameworkBase.System.Object.Kind_Ptr;
         name : NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
   private
   
      This_AssemblyFile : constant Standard.Wide_String := "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\System.dll";
      This_AssemblyName : constant Standard.Wide_String := "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
      This_TypeName     : constant Standard.Wide_String := "System.ComponentModel.Design.Serialization.IDesignerSerializationManager";
   
end;
