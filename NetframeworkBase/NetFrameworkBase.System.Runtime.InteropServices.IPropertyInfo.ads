--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with NetFrameworkBase.System.Guid;
limited with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Reflection.BindingFlags;
limited with NetFrameworkBase.System.Reflection.Binder;
limited with NetFrameworkBase.System.Globalization.CultureInfo;
limited with NetFrameworkBase.System.Reflection.MemberTypes;
limited with NetFrameworkBase.System.Reflection.MethodInfo;
limited with NetFrameworkBase.System.Reflection.ParameterInfo;
limited with NetFrameworkBase.System.Reflection.PropertyAttributes;
with NetFrameworkWin32;
with NetFrameworkAdaRuntime;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Runtime.InteropServices.IPropertyInfo is
   
   type Kind is interface and NetFrameworkWin32.IUnknown;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array (Natural range <>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function GetTypeInfoCount
      (
         this : in out IPropertyInfo.Kind;
         pcTInfo : NetFrameworkBase.UInt32
      ) return HResult is abstract;
      
      function GetTypeInfo
      (
         this : in out IPropertyInfo.Kind;
         iTInfo : NetFrameworkBase.UInt32;
         lcid : NetFrameworkBase.UInt32;
         ppTInfo : NetFrameworkBase.IntPtr
      ) return HResult is abstract;
      
      function GetIDsOfNames
      (
         this : in out IPropertyInfo.Kind;
         riid : NetFrameworkBase.System.Guid.Kind_Ptr;
         rgszNames : NetFrameworkBase.IntPtr;
         cNames : NetFrameworkBase.UInt32;
         lcid : NetFrameworkBase.UInt32;
         rgDispId : NetFrameworkBase.IntPtr
      ) return HResult is abstract;
      
      function Invoke
      (
         this : in out IPropertyInfo.Kind;
         dispIdMember : NetFrameworkBase.UInt32;
         riid : NetFrameworkBase.System.Guid.Kind_Ptr;
         lcid : NetFrameworkBase.UInt32;
         wFlags : NetFrameworkBase.Int16;
         pDispParams : NetFrameworkBase.IntPtr;
         pVarResult : NetFrameworkBase.IntPtr;
         pExcepInfo : NetFrameworkBase.IntPtr;
         puArgErr : NetFrameworkBase.IntPtr
      ) return HResult is abstract;
      
      function ToString
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function Equals
      (
         this : in out IPropertyInfo.Kind;
         other : NetFrameworkBase.System.Object.Kind_Ptr;
         RetVal : access NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
      function GetHashCode
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function GetType
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Type_x.Kind_Ptr
      ) return HResult is abstract;
      
      function get_MemberType
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.MemberTypes.Kind
      ) return HResult is abstract;
      
      function get_Name
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function get_DeclaringType
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Type_x.Kind_Ptr
      ) return HResult is abstract;
      
      function get_ReflectedType
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Type_x.Kind_Ptr
      ) return HResult is abstract;
      
      function GetCustomAttributes
      (
         this : in out IPropertyInfo.Kind;
         attributeType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         inherit : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.System.Object.Kind_Array
      ) return HResult is abstract;
      
      function GetCustomAttributes
      (
         this : in out IPropertyInfo.Kind;
         inherit : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.System.Object.Kind_Array
      ) return HResult is abstract;
      
      function IsDefined
      (
         this : in out IPropertyInfo.Kind;
         attributeType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         inherit : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
      function get_PropertyType
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Type_x.Kind_Ptr
      ) return HResult is abstract;
      
      function GetValue
      (
         this : in out IPropertyInfo.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr;
         index : NetFrameworkBase.System.Object.Kind_Array;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function GetValue
      (
         this : in out IPropertyInfo.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr;
         invokeAttr : NetFrameworkBase.System.Reflection.BindingFlags.Kind;
         binder : NetFrameworkBase.System.Reflection.Binder.Kind_Ptr;
         index : NetFrameworkBase.System.Object.Kind_Array;
         culture : NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function SetValue
      (
         this : in out IPropertyInfo.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         index : NetFrameworkBase.System.Object.Kind_Array
      ) return HResult is abstract;
      
      function SetValue
      (
         this : in out IPropertyInfo.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         invokeAttr : NetFrameworkBase.System.Reflection.BindingFlags.Kind;
         binder : NetFrameworkBase.System.Reflection.Binder.Kind_Ptr;
         index : NetFrameworkBase.System.Object.Kind_Array;
         culture : NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr
      ) return HResult is abstract;
      
      function GetAccessors
      (
         this : in out IPropertyInfo.Kind;
         nonPublic : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.System.Reflection.MethodInfo.Kind_Array
      ) return HResult is abstract;
      
      function GetGetMethod
      (
         this : in out IPropertyInfo.Kind;
         nonPublic : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr
      ) return HResult is abstract;
      
      function GetSetMethod
      (
         this : in out IPropertyInfo.Kind;
         nonPublic : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr
      ) return HResult is abstract;
      
      function GetIndexParameters
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.ParameterInfo.Kind_Array
      ) return HResult is abstract;
      
      function get_Attributes
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.PropertyAttributes.Kind
      ) return HResult is abstract;
      
      function get_CanRead
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
      function get_CanWrite
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
      function GetAccessors
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.MethodInfo.Kind_Array
      ) return HResult is abstract;
      
      function GetGetMethod
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr
      ) return HResult is abstract;
      
      function GetSetMethod
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr
      ) return HResult is abstract;
      
      function get_IsSpecialName
      (
         this : in out IPropertyInfo.Kind;
         RetVal : access NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
   private
   
      This_AssemblyFile : constant Standard.Wide_String := "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll";
      This_AssemblyName : constant Standard.Wide_String := "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
      This_TypeName     : constant Standard.Wide_String := "System.Runtime.InteropServices._PropertyInfo";
   
end;
