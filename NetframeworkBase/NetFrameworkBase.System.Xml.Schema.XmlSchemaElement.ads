--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Xml.Schema.XmlSchemaParticle;
limited with NetFrameworkBase.System.Xml.Schema.XmlSchemaDerivationMethod;
limited with NetFrameworkBase.System.Xml.Schema.XmlSchemaForm;
limited with NetFrameworkBase.System.Xml.XmlQualifiedName;
limited with NetFrameworkBase.System.Xml.Schema.XmlSchemaType;
limited with NetFrameworkBase.System.Xml.Schema.XmlSchemaObjectCollection;
with NetFrameworkBase.System.Object;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Xml.Schema.XmlSchemaElement is
   
   type Kind is new NetFrameworkBase.System.Xml.Schema.XmlSchemaParticle.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function IsAbstract
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure IsAbstract
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function Block
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaDerivationMethod.Kind;
      
      procedure Block
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.System.Xml.Schema.XmlSchemaDerivationMethod.Kind
      );
      
      function DefaultValue
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure DefaultValue
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function Final
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaDerivationMethod.Kind;
      
      procedure Final
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.System.Xml.Schema.XmlSchemaDerivationMethod.Kind
      );
      
      function FixedValue
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure FixedValue
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function Form
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaForm.Kind;
      
      procedure Form
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.System.Xml.Schema.XmlSchemaForm.Kind
      );
      
      function Name
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure Name
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function IsNillable
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure IsNillable
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function RefName
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.XmlQualifiedName.Kind_Ptr;
      
      procedure RefName
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.System.Xml.XmlQualifiedName.Kind_Ptr
      );
      
      function SubstitutionGroup
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.XmlQualifiedName.Kind_Ptr;
      
      procedure SubstitutionGroup
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.System.Xml.XmlQualifiedName.Kind_Ptr
      );
      
      function SchemaTypeName
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.XmlQualifiedName.Kind_Ptr;
      
      procedure SchemaTypeName
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.System.Xml.XmlQualifiedName.Kind_Ptr
      );
      
      function SchemaType
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaType.Kind_Ptr;
      
      procedure SchemaType
      (
         this : in out XmlSchemaElement.Kind;
         value : NetFrameworkBase.System.Xml.Schema.XmlSchemaType.Kind_Ptr
      );
      
      function Constraints
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaObjectCollection.Kind_Ptr;
      
      function QualifiedName
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.XmlQualifiedName.Kind_Ptr;
      
      function ElementSchemaType
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaType.Kind_Ptr;
      
      function BlockResolved
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaDerivationMethod.Kind;
      
      function FinalResolved
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Xml.Schema.XmlSchemaDerivationMethod.Kind;
      
      function ElementType
      (
         this : in out XmlSchemaElement.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function Constructor return NetFrameworkBase.System.Xml.Schema.XmlSchemaElement.Kind_Ptr;
      
end;
