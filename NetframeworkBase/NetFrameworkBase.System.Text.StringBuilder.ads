--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Decimal;
limited with NetFrameworkBase.System.IFormatProvider;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Text.StringBuilder is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Capacity
      (
         this : in out StringBuilder.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure Capacity
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function MaxCapacity
      (
         this : in out StringBuilder.Kind
      )
      return NetFrameworkBase.Int32;
      
      function EnsureCapacity
      (
         this : in out StringBuilder.Kind;
         capacity : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function ToString
      (
         this : in out StringBuilder.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ToString
      (
         this : in out StringBuilder.Kind;
         startIndex : NetFrameworkBase.Int32; 
         length : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.BSTR;
      
      function Clear
      (
         this : in out StringBuilder.Kind
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Length
      (
         this : in out StringBuilder.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure Length
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function Chars
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Wide_Char;
      
      procedure Chars
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Wide_Char
      );
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Wide_Char; 
         repeatCount : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Wide_Char_Array; 
         startIndex : NetFrameworkBase.Int32; 
         charCount : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.BSTR; 
         startIndex : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      procedure CopyTo
      (
         this : in out StringBuilder.Kind;
         sourceIndex : NetFrameworkBase.Int32; 
         destination : NetFrameworkBase.Wide_Char_Array; 
         destinationIndex : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      );
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.BSTR; 
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Remove
      (
         this : in out StringBuilder.Kind;
         startIndex : NetFrameworkBase.Int32; 
         length : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.SByte
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Byte
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Wide_Char
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Int16
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Double
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.System.Decimal.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.UInt16
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.UInt32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.UInt64
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Wide_Char_Array
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.SByte
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Byte
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Int16
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Wide_Char
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Wide_Char_Array
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Wide_Char_Array; 
         startIndex : NetFrameworkBase.Int32; 
         charCount : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Double
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.System.Decimal.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.UInt16
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.UInt32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.UInt64
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         format : NetFrameworkBase.BSTR; 
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         format : NetFrameworkBase.BSTR; 
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr; 
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         format : NetFrameworkBase.BSTR; 
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr; 
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr; 
         arg2 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         provider : NetFrameworkBase.System.IFormatProvider.Kind_Ptr; 
         format : NetFrameworkBase.BSTR; 
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         provider : NetFrameworkBase.System.IFormatProvider.Kind_Ptr; 
         format : NetFrameworkBase.BSTR; 
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr; 
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         provider : NetFrameworkBase.System.IFormatProvider.Kind_Ptr; 
         format : NetFrameworkBase.BSTR; 
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr; 
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr; 
         arg2 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Replace
      (
         this : in out StringBuilder.Kind;
         oldValue : NetFrameworkBase.BSTR; 
         newValue : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Equals
      (
         this : in out StringBuilder.Kind;
         sb : NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Replace
      (
         this : in out StringBuilder.Kind;
         oldValue : NetFrameworkBase.BSTR; 
         newValue : NetFrameworkBase.BSTR; 
         startIndex : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Replace
      (
         this : in out StringBuilder.Kind;
         oldChar : NetFrameworkBase.Wide_Char; 
         newChar : NetFrameworkBase.Wide_Char
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Replace
      (
         this : in out StringBuilder.Kind;
         oldChar : NetFrameworkBase.Wide_Char; 
         newChar : NetFrameworkBase.Wide_Char; 
         startIndex : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Wide_Char_Ptr; 
         valueCount : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendLine
      (
         this : in out StringBuilder.Kind
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Append
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Insert
      (
         this : in out StringBuilder.Kind;
         index : NetFrameworkBase.Int32; 
         value : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendLine
      (
         this : in out StringBuilder.Kind;
         value : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         format : NetFrameworkBase.BSTR; 
         args : NetFrameworkBase.System.Object.Kind_Array
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function AppendFormat
      (
         this : in out StringBuilder.Kind;
         provider : NetFrameworkBase.System.IFormatProvider.Kind_Ptr; 
         format : NetFrameworkBase.BSTR; 
         args : NetFrameworkBase.System.Object.Kind_Array
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Constructor return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Constructor
      (
         capacity : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Constructor
      (
         value : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Constructor
      (
         value : NetFrameworkBase.BSTR;
         capacity : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Constructor
      (
         value : NetFrameworkBase.BSTR;
         startIndex : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32;
         capacity : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
      function Constructor
      (
         capacity : NetFrameworkBase.Int32;
         maxCapacity : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Text.StringBuilder.Kind_Ptr;
      
end;
