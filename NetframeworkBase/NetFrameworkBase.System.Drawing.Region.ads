--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.MarshalByRefObject;
limited with NetFrameworkBase.System.Drawing.Rectangle;
limited with NetFrameworkBase.System.Drawing.Graphics;
limited with NetFrameworkBase.System.Drawing.RectangleF;
limited with NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath;
limited with NetFrameworkBase.System.Drawing.Drawing2D.Matrix;
limited with NetFrameworkBase.System.Drawing.PointF;
limited with NetFrameworkBase.System.Drawing.Point;
limited with NetFrameworkBase.System.Drawing.Drawing2D.RegionData;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Drawing.Region is
   
   type Kind is new NetFrameworkBase.System.MarshalByRefObject.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Clone
      (
         this : in out Region.Kind
      )
      return NetFrameworkBase.System.Drawing.Region.Kind_Ptr;
      
      procedure MakeInfinite
      (
         this : in out Region.Kind
      );
      
      procedure MakeEmpty
      (
         this : in out Region.Kind
      );
      
      procedure Intersect
      (
         this : in out Region.Kind;
         region : NetFrameworkBase.System.Drawing.Region.Kind_Ptr
      );
      
      procedure Union
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      );
      
      procedure Exclude
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      );
      
      function GetHrgn
      (
         this : in out Region.Kind;
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.IntPtr;
      
      function IsInfinite
      (
         this : in out Region.Kind;
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function FromHrgn
      (
         hrgn : NetFrameworkBase.IntPtr
      )
      return NetFrameworkBase.System.Drawing.Region.Kind_Ptr;
      
      procedure Dispose
      (
         this : in out Region.Kind
      );
      
      procedure Intersect
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure Intersect
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      );
      
      procedure Intersect
      (
         this : in out Region.Kind;
         path : NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr
      );
      
      procedure ReleaseHrgn
      (
         this : in out Region.Kind;
         regionHandle : NetFrameworkBase.IntPtr
      );
      
      procedure Union
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure Union
      (
         this : in out Region.Kind;
         path : NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr
      );
      
      procedure Union
      (
         this : in out Region.Kind;
         region : NetFrameworkBase.System.Drawing.Region.Kind_Ptr
      );
      
      procedure Xor_x
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure Xor_x
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      );
      
      procedure Xor_x
      (
         this : in out Region.Kind;
         path : NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr
      );
      
      procedure Xor_x
      (
         this : in out Region.Kind;
         region : NetFrameworkBase.System.Drawing.Region.Kind_Ptr
      );
      
      procedure Exclude
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure Exclude
      (
         this : in out Region.Kind;
         path : NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr
      );
      
      procedure Exclude
      (
         this : in out Region.Kind;
         region : NetFrameworkBase.System.Drawing.Region.Kind_Ptr
      );
      
      procedure Complement
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure Complement
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      );
      
      procedure Complement
      (
         this : in out Region.Kind;
         path : NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr
      );
      
      procedure Complement
      (
         this : in out Region.Kind;
         region : NetFrameworkBase.System.Drawing.Region.Kind_Ptr
      );
      
      procedure Translate
      (
         this : in out Region.Kind;
         dx : NetFrameworkBase.Single; 
         dy : NetFrameworkBase.Single
      );
      
      procedure Translate
      (
         this : in out Region.Kind;
         dx : NetFrameworkBase.Int32; 
         dy : NetFrameworkBase.Int32
      );
      
      procedure Transform
      (
         this : in out Region.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      );
      
      function GetBounds
      (
         this : in out Region.Kind;
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
      
      function IsEmpty
      (
         this : in out Region.Kind;
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Equals
      (
         this : in out Region.Kind;
         region : NetFrameworkBase.System.Drawing.Region.Kind_Ptr; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetRegionData
      (
         this : in out Region.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.RegionData.Kind_Ptr;
      
      function IsVisible
      (
         this : in out Region.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         point : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         point : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         width : NetFrameworkBase.Single; 
         height : NetFrameworkBase.Single
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         width : NetFrameworkBase.Single; 
         height : NetFrameworkBase.Single; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         point : NetFrameworkBase.System.Drawing.Point.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         point : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         width : NetFrameworkBase.Int32; 
         height : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         width : NetFrameworkBase.Int32; 
         height : NetFrameworkBase.Int32; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out Region.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr; 
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetRegionScans
      (
         this : in out Region.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.RectangleF.Kind_Array_Ptr;
      
      function Constructor return NetFrameworkBase.System.Drawing.Region.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Region.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Region.Kind_Ptr;
      
      function Constructor
      (
         path : NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Region.Kind_Ptr;
      
      function Constructor
      (
         rgnData : NetFrameworkBase.System.Drawing.Drawing2D.RegionData.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Region.Kind_Ptr;
      
end;
