--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Data.Common.DbConnection;
limited with NetFrameworkBase.System.TimeSpan;
limited with NetFrameworkBase.System.Data.SqlClient.SqlCredential;
limited with NetFrameworkBase.System.Data.SqlClient.SqlInfoMessageEventHandler;
limited with NetFrameworkBase.System.Data.IsolationLevel;
limited with NetFrameworkBase.System.EnterpriseServices.ITransaction;
limited with NetFrameworkBase.System.Threading.CancellationToken;
limited with NetFrameworkBase.System.Security.SecureString;
limited with NetFrameworkBase.System.Transactions.Transaction;
limited with NetFrameworkBase.System.Data.ConnectionState;
limited with NetFrameworkBase.System.Data.DataTable;
limited with NetFrameworkBase.System.Guid;
limited with NetFrameworkBase.System.Data.SqlClient.SqlTransaction;
limited with NetFrameworkBase.System.Data.SqlClient.SqlCommand;
limited with NetFrameworkBase.System.Threading.Tasks.Task_x;
limited with NetFrameworkBase.System.Collections.IDictionary;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Data.SqlClient.SqlConnection is
   
   type Kind is new NetFrameworkBase.System.Data.Common.DbConnection.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function ColumnEncryptionQueryMetadataCacheEnabled
      return NetFrameworkBase.Boolean;
      
      procedure ColumnEncryptionQueryMetadataCacheEnabled
      (
         value : NetFrameworkBase.Boolean
      )
      ;
      
      function ColumnEncryptionKeyCacheTtl
      return NetFrameworkBase.System.TimeSpan.Kind_Ptr;
      
      procedure ColumnEncryptionKeyCacheTtl
      (
         value : NetFrameworkBase.System.TimeSpan.Kind_Ptr
      )
      ;
      
      function ConnectionString
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ConnectionTimeout
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Database
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function DataSource
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ServerVersion
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function State
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.System.Data.ConnectionState.Kind;
      
      procedure ClearAllPools
      ;
      
      function GetSchema
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.System.Data.DataTable.Kind_Ptr;
      
      function GetSchema
      (
         this : in out SqlConnection.Kind;
         collectionName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Data.DataTable.Kind_Ptr;
      
      function GetSchema
      (
         this : in out SqlConnection.Kind;
         collectionName : NetFrameworkBase.BSTR; 
         restrictionValues : NetFrameworkBase.BSTR_Array
      )
      return NetFrameworkBase.System.Data.DataTable.Kind_Ptr;
      
      function StatisticsEnabled
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure StatisticsEnabled
      (
         this : in out SqlConnection.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function AccessToken
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure AccessToken
      (
         this : in out SqlConnection.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      procedure ConnectionString
      (
         this : in out SqlConnection.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function PacketSize
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.Int32;
      
      function ClientConnectionId
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.System.Guid.Kind_Ptr;
      
      function WorkstationId
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Credential
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlCredential.Kind_Ptr;
      
      procedure Credential
      (
         this : in out SqlConnection.Kind;
         value : NetFrameworkBase.System.Data.SqlClient.SqlCredential.Kind_Ptr
      );
      
      procedure add_InfoMessage
      (
         this : in out SqlConnection.Kind;
         value : NetFrameworkBase.System.Data.SqlClient.SqlInfoMessageEventHandler.Kind_Ptr
      );
      
      procedure remove_InfoMessage
      (
         this : in out SqlConnection.Kind;
         value : NetFrameworkBase.System.Data.SqlClient.SqlInfoMessageEventHandler.Kind_Ptr
      );
      
      function FireInfoMessageEventOnUserErrors
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure FireInfoMessageEventOnUserErrors
      (
         this : in out SqlConnection.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function BeginTransaction
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlTransaction.Kind_Ptr;
      
      function BeginTransaction
      (
         this : in out SqlConnection.Kind;
         iso : NetFrameworkBase.System.Data.IsolationLevel.Kind
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlTransaction.Kind_Ptr;
      
      function BeginTransaction
      (
         this : in out SqlConnection.Kind;
         transactionName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlTransaction.Kind_Ptr;
      
      function BeginTransaction
      (
         this : in out SqlConnection.Kind;
         iso : NetFrameworkBase.System.Data.IsolationLevel.Kind; 
         transactionName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlTransaction.Kind_Ptr;
      
      procedure ChangeDatabase
      (
         this : in out SqlConnection.Kind;
         database : NetFrameworkBase.BSTR
      );
      
      procedure ClearPool
      (
         connection : NetFrameworkBase.System.Data.SqlClient.SqlConnection.Kind_Ptr
      )
      ;
      
      procedure Close
      (
         this : in out SqlConnection.Kind
      );
      
      function CreateCommand
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlCommand.Kind_Ptr;
      
      procedure EnlistDistributedTransaction
      (
         this : in out SqlConnection.Kind;
         transaction : NetFrameworkBase.System.EnterpriseServices.ITransaction.Kind_Ptr
      );
      
      procedure Open
      (
         this : in out SqlConnection.Kind
      );
      
      function OpenAsync
      (
         this : in out SqlConnection.Kind;
         cancellationToken : NetFrameworkBase.System.Threading.CancellationToken.Kind_Ptr
      )
      return NetFrameworkBase.System.Threading.Tasks.Task_x.Kind_Ptr;
      
      procedure ChangePassword
      (
         connectionString : NetFrameworkBase.BSTR; 
         newPassword : NetFrameworkBase.BSTR
      )
      ;
      
      procedure ChangePassword
      (
         connectionString : NetFrameworkBase.BSTR; 
         credential : NetFrameworkBase.System.Data.SqlClient.SqlCredential.Kind_Ptr; 
         newSecurePassword : NetFrameworkBase.System.Security.SecureString.Kind_Ptr
      )
      ;
      
      procedure ResetStatistics
      (
         this : in out SqlConnection.Kind
      );
      
      function RetrieveStatistics
      (
         this : in out SqlConnection.Kind
      )
      return NetFrameworkBase.System.Collections.IDictionary.Kind_Ptr;
      
      procedure EnlistTransaction
      (
         this : in out SqlConnection.Kind;
         transaction : NetFrameworkBase.System.Transactions.Transaction.Kind_Ptr
      );
      
      function Constructor
      (
         connectionString : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlConnection.Kind_Ptr;
      
      function Constructor
      (
         connectionString : NetFrameworkBase.BSTR;
         credential : NetFrameworkBase.System.Data.SqlClient.SqlCredential.Kind_Ptr
      )
      return NetFrameworkBase.System.Data.SqlClient.SqlConnection.Kind_Ptr;
      
      function Constructor return NetFrameworkBase.System.Data.SqlClient.SqlConnection.Kind_Ptr;
      
end;
