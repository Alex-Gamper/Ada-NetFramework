--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Drawing.Image;
limited with NetFrameworkBase.System.Drawing.Color;
limited with NetFrameworkBase.System.Drawing.Rectangle;
limited with NetFrameworkBase.System.Drawing.Imaging.PixelFormat;
limited with NetFrameworkBase.System.Drawing.RectangleF;
limited with NetFrameworkBase.System.Drawing.Imaging.ImageLockMode;
limited with NetFrameworkBase.System.Drawing.Imaging.BitmapData;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.IO.Stream;
limited with NetFrameworkBase.System.Drawing.Graphics;
limited with NetFrameworkBase.System.Drawing.Size;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Drawing.Bitmap is
   
   type Kind is new NetFrameworkBase.System.Drawing.Image.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function FromHicon
      (
         hicon : NetFrameworkBase.IntPtr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function FromResource
      (
         hinstance : NetFrameworkBase.IntPtr; 
         bitmapName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function GetHbitmap
      (
         this : in out Bitmap.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      function GetHbitmap
      (
         this : in out Bitmap.Kind;
         background : NetFrameworkBase.System.Drawing.Color.Kind_Ptr
      )
      return NetFrameworkBase.IntPtr;
      
      function GetHicon
      (
         this : in out Bitmap.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      function Clone
      (
         this : in out Bitmap.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr; 
         format : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Clone
      (
         this : in out Bitmap.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr; 
         format : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      procedure MakeTransparent
      (
         this : in out Bitmap.Kind
      );
      
      procedure MakeTransparent
      (
         this : in out Bitmap.Kind;
         transparentColor : NetFrameworkBase.System.Drawing.Color.Kind_Ptr
      );
      
      function LockBits
      (
         this : in out Bitmap.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr; 
         flags : NetFrameworkBase.System.Drawing.Imaging.ImageLockMode.Kind; 
         format : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.System.Drawing.Imaging.BitmapData.Kind_Ptr;
      
      function LockBits
      (
         this : in out Bitmap.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr; 
         flags : NetFrameworkBase.System.Drawing.Imaging.ImageLockMode.Kind; 
         format : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind; 
         bitmapData : NetFrameworkBase.System.Drawing.Imaging.BitmapData.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Imaging.BitmapData.Kind_Ptr;
      
      procedure UnlockBits
      (
         this : in out Bitmap.Kind;
         bitmapdata : NetFrameworkBase.System.Drawing.Imaging.BitmapData.Kind_Ptr
      );
      
      function GetPixel
      (
         this : in out Bitmap.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
      
      procedure SetPixel
      (
         this : in out Bitmap.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         color : NetFrameworkBase.System.Drawing.Color.Kind_Ptr
      );
      
      procedure SetResolution
      (
         this : in out Bitmap.Kind;
         xDpi : NetFrameworkBase.Single; 
         yDpi : NetFrameworkBase.Single
      );
      
      function Constructor
      (
         filename : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         filename : NetFrameworkBase.BSTR;
         useIcm : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         type_x : NetFrameworkBase.System.Type_x.Kind_Ptr;
         resource : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr;
         useIcm : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         width : NetFrameworkBase.Int32;
         height : NetFrameworkBase.Int32;
         stride : NetFrameworkBase.Int32;
         format : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind;
         scan0 : NetFrameworkBase.IntPtr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         width : NetFrameworkBase.Int32;
         height : NetFrameworkBase.Int32;
         format : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         width : NetFrameworkBase.Int32;
         height : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         width : NetFrameworkBase.Int32;
         height : NetFrameworkBase.Int32;
         g : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         original : NetFrameworkBase.System.Drawing.Image.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         original : NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
         width : NetFrameworkBase.Int32;
         height : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function Constructor
      (
         original : NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
         newSize : NetFrameworkBase.System.Drawing.Size.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
end;
