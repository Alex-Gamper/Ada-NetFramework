--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.MarshalByRefObject;
limited with NetFrameworkBase.System.IO.Stream;
limited with NetFrameworkBase.System.Drawing.Imaging.PixelFormat;
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Guid;
limited with NetFrameworkBase.System.Drawing.Imaging.ImageFormat;
limited with NetFrameworkBase.System.Drawing.Imaging.ImageCodecInfo;
limited with NetFrameworkBase.System.Drawing.Imaging.EncoderParameters;
limited with NetFrameworkBase.System.Drawing.GraphicsUnit;
limited with NetFrameworkBase.System.Drawing.Imaging.ColorPalette;
limited with NetFrameworkBase.System.Drawing.Image.GetThumbnailImageAbort;
limited with NetFrameworkBase.System.Drawing.Imaging.FrameDimension;
limited with NetFrameworkBase.System.Drawing.RotateFlipType;
limited with NetFrameworkBase.System.Drawing.Imaging.PropertyItem;
limited with NetFrameworkBase.System.Drawing.Bitmap;
limited with NetFrameworkBase.System.Drawing.SizeF;
limited with NetFrameworkBase.System.Drawing.Size;
limited with NetFrameworkBase.System.Drawing.RectangleF;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Drawing.Image is
   
   type Kind is new NetFrameworkBase.System.MarshalByRefObject.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function FromFile
      (
         filename : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
      
      function FromFile
      (
         filename : NetFrameworkBase.BSTR; 
         useEmbeddedColorManagement : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
      
      function FromStream
      (
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
      
      function FromStream
      (
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr; 
         useEmbeddedColorManagement : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
      
      function Clone
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure Dispose
      (
         this : in out Image.Kind
      );
      
      function FromHbitmap
      (
         hbitmap : NetFrameworkBase.IntPtr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function FromHbitmap
      (
         hbitmap : NetFrameworkBase.IntPtr; 
         hpalette : NetFrameworkBase.IntPtr
      )
      return NetFrameworkBase.System.Drawing.Bitmap.Kind_Ptr;
      
      function GetPixelFormatSize
      (
         pixfmt : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.Int32;
      
      function IsAlphaPixelFormat
      (
         pixfmt : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsExtendedPixelFormat
      (
         pixfmt : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsCanonicalPixelFormat
      (
         pixfmt : NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Tag
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure Tag
      (
         this : in out Image.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      );
      
      function GetEncoderParameterList
      (
         this : in out Image.Kind;
         encoder : NetFrameworkBase.System.Guid.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Imaging.EncoderParameters.Kind_Ptr;
      
      procedure Save
      (
         this : in out Image.Kind;
         filename : NetFrameworkBase.BSTR
      );
      
      procedure Save
      (
         this : in out Image.Kind;
         filename : NetFrameworkBase.BSTR; 
         format : NetFrameworkBase.System.Drawing.Imaging.ImageFormat.Kind_Ptr
      );
      
      procedure Save
      (
         this : in out Image.Kind;
         filename : NetFrameworkBase.BSTR; 
         encoder : NetFrameworkBase.System.Drawing.Imaging.ImageCodecInfo.Kind_Ptr; 
         encoderParams : NetFrameworkBase.System.Drawing.Imaging.EncoderParameters.Kind_Ptr
      );
      
      procedure Save
      (
         this : in out Image.Kind;
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr; 
         format : NetFrameworkBase.System.Drawing.Imaging.ImageFormat.Kind_Ptr
      );
      
      procedure Save
      (
         this : in out Image.Kind;
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr; 
         encoder : NetFrameworkBase.System.Drawing.Imaging.ImageCodecInfo.Kind_Ptr; 
         encoderParams : NetFrameworkBase.System.Drawing.Imaging.EncoderParameters.Kind_Ptr
      );
      
      procedure SaveAdd
      (
         this : in out Image.Kind;
         encoderParams : NetFrameworkBase.System.Drawing.Imaging.EncoderParameters.Kind_Ptr
      );
      
      procedure SaveAdd
      (
         this : in out Image.Kind;
         image : NetFrameworkBase.System.Drawing.Image.Kind_Ptr; 
         encoderParams : NetFrameworkBase.System.Drawing.Imaging.EncoderParameters.Kind_Ptr
      );
      
      function PhysicalDimension
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Drawing.SizeF.Kind_Ptr;
      
      function Size
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Drawing.Size.Kind_Ptr;
      
      function Width
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Height
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.Int32;
      
      function HorizontalResolution
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.Single;
      
      function VerticalResolution
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.Single;
      
      function Flags
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.Int32;
      
      function RawFormat
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Drawing.Imaging.ImageFormat.Kind_Ptr;
      
      function PixelFormat
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Drawing.Imaging.PixelFormat.Kind;
      
      function GetBounds
      (
         this : in out Image.Kind;
         pageUnit : NetFrameworkBase.System.Drawing.GraphicsUnit.Kind
      )
      return NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
      
      function Palette
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Drawing.Imaging.ColorPalette.Kind_Ptr;
      
      procedure Palette
      (
         this : in out Image.Kind;
         value : NetFrameworkBase.System.Drawing.Imaging.ColorPalette.Kind_Ptr
      );
      
      function GetThumbnailImage
      (
         this : in out Image.Kind;
         thumbWidth : NetFrameworkBase.Int32; 
         thumbHeight : NetFrameworkBase.Int32; 
         callback : NetFrameworkBase.System.Drawing.Image.GetThumbnailImageAbort.Kind_Ptr; 
         callbackData : NetFrameworkBase.IntPtr
      )
      return NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
      
      function FrameDimensionsList
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Guid.Kind_Array_Ptr;
      
      function GetFrameCount
      (
         this : in out Image.Kind;
         dimension : NetFrameworkBase.System.Drawing.Imaging.FrameDimension.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function SelectActiveFrame
      (
         this : in out Image.Kind;
         dimension : NetFrameworkBase.System.Drawing.Imaging.FrameDimension.Kind_Ptr; 
         frameIndex : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      procedure RotateFlip
      (
         this : in out Image.Kind;
         rotateFlipType : NetFrameworkBase.System.Drawing.RotateFlipType.Kind
      );
      
      function PropertyIdList
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.Int32_Array;
      
      function GetPropertyItem
      (
         this : in out Image.Kind;
         propid : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Drawing.Imaging.PropertyItem.Kind_Ptr;
      
      procedure RemovePropertyItem
      (
         this : in out Image.Kind;
         propid : NetFrameworkBase.Int32
      );
      
      procedure SetPropertyItem
      (
         this : in out Image.Kind;
         propitem : NetFrameworkBase.System.Drawing.Imaging.PropertyItem.Kind_Ptr
      );
      
      function PropertyItems
      (
         this : in out Image.Kind
      )
      return NetFrameworkBase.System.Drawing.Imaging.PropertyItem.Kind_Array;
      
      function FromStream
      (
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr; 
         useEmbeddedColorManagement : NetFrameworkBase.Boolean; 
         validateImageData : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Drawing.Image.Kind_Ptr;
      
end;
