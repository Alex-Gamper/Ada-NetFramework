--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Drawing.Brush;
limited with NetFrameworkBase.System.Drawing.Color;
limited with NetFrameworkBase.System.Drawing.Drawing2D.Blend;
limited with NetFrameworkBase.System.Drawing.Drawing2D.ColorBlend;
limited with NetFrameworkBase.System.Drawing.Drawing2D.WrapMode;
limited with NetFrameworkBase.System.Drawing.Drawing2D.Matrix;
limited with NetFrameworkBase.System.Drawing.Drawing2D.MatrixOrder;
limited with NetFrameworkBase.System.Drawing.PointF;
limited with NetFrameworkBase.System.Drawing.Point;
limited with NetFrameworkBase.System.Drawing.RectangleF;
limited with NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientMode;
limited with NetFrameworkBase.System.Drawing.Rectangle;
with NetFrameworkBase.System.Object;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush is
   
   type Kind is new NetFrameworkBase.System.Drawing.Brush.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      procedure TranslateTransform
      (
         this : in out LinearGradientBrush.Kind;
         dx : NetFrameworkBase.Single; 
         dy : NetFrameworkBase.Single
      );
      
      function Clone
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function LinearColors
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.System.Drawing.Color.Kind_Array_Ptr;
      
      procedure LinearColors
      (
         this : in out LinearGradientBrush.Kind;
         value : NetFrameworkBase.System.Drawing.Color.Kind_Array_Ptr
      );
      
      function Rectangle
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
      
      function GammaCorrection
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure GammaCorrection
      (
         this : in out LinearGradientBrush.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function Blend
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.Blend.Kind_Ptr;
      
      procedure Blend
      (
         this : in out LinearGradientBrush.Kind;
         value : NetFrameworkBase.System.Drawing.Drawing2D.Blend.Kind_Ptr
      );
      
      procedure SetSigmaBellShape
      (
         this : in out LinearGradientBrush.Kind;
         focus : NetFrameworkBase.Single
      );
      
      procedure SetSigmaBellShape
      (
         this : in out LinearGradientBrush.Kind;
         focus : NetFrameworkBase.Single; 
         scale : NetFrameworkBase.Single
      );
      
      procedure SetBlendTriangularShape
      (
         this : in out LinearGradientBrush.Kind;
         focus : NetFrameworkBase.Single
      );
      
      procedure SetBlendTriangularShape
      (
         this : in out LinearGradientBrush.Kind;
         focus : NetFrameworkBase.Single; 
         scale : NetFrameworkBase.Single
      );
      
      function InterpolationColors
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.ColorBlend.Kind_Ptr;
      
      procedure InterpolationColors
      (
         this : in out LinearGradientBrush.Kind;
         value : NetFrameworkBase.System.Drawing.Drawing2D.ColorBlend.Kind_Ptr
      );
      
      function WrapMode
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.WrapMode.Kind;
      
      procedure WrapMode
      (
         this : in out LinearGradientBrush.Kind;
         value : NetFrameworkBase.System.Drawing.Drawing2D.WrapMode.Kind
      );
      
      function Transform
      (
         this : in out LinearGradientBrush.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr;
      
      procedure Transform
      (
         this : in out LinearGradientBrush.Kind;
         value : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      );
      
      procedure ResetTransform
      (
         this : in out LinearGradientBrush.Kind
      );
      
      procedure MultiplyTransform
      (
         this : in out LinearGradientBrush.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      );
      
      procedure MultiplyTransform
      (
         this : in out LinearGradientBrush.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr; 
         order : NetFrameworkBase.System.Drawing.Drawing2D.MatrixOrder.Kind
      );
      
      procedure TranslateTransform
      (
         this : in out LinearGradientBrush.Kind;
         dx : NetFrameworkBase.Single; 
         dy : NetFrameworkBase.Single; 
         order : NetFrameworkBase.System.Drawing.Drawing2D.MatrixOrder.Kind
      );
      
      procedure ScaleTransform
      (
         this : in out LinearGradientBrush.Kind;
         sx : NetFrameworkBase.Single; 
         sy : NetFrameworkBase.Single
      );
      
      procedure ScaleTransform
      (
         this : in out LinearGradientBrush.Kind;
         sx : NetFrameworkBase.Single; 
         sy : NetFrameworkBase.Single; 
         order : NetFrameworkBase.System.Drawing.Drawing2D.MatrixOrder.Kind
      );
      
      procedure RotateTransform
      (
         this : in out LinearGradientBrush.Kind;
         angle : NetFrameworkBase.Single
      );
      
      procedure RotateTransform
      (
         this : in out LinearGradientBrush.Kind;
         angle : NetFrameworkBase.Single; 
         order : NetFrameworkBase.System.Drawing.Drawing2D.MatrixOrder.Kind
      );
      
      function Constructor
      (
         point1 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr;
         point2 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
      function Constructor
      (
         point1 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr;
         point2 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         linearGradientMode : NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientMode.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         linearGradientMode : NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientMode.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         angle : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         angle : NetFrameworkBase.Single;
         isAngleScaleable : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         angle : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
      function Constructor
      (
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr;
         color1 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         color2 : NetFrameworkBase.System.Drawing.Color.Kind_Ptr;
         angle : NetFrameworkBase.Single;
         isAngleScaleable : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.LinearGradientBrush.Kind_Ptr;
      
end;
