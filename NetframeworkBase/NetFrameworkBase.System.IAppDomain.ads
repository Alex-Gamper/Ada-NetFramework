--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with NetFrameworkBase.System.Guid;
limited with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.EventHandler;
limited with NetFrameworkBase.System.AssemblyLoadEventHandler;
limited with NetFrameworkBase.System.ResolveEventHandler;
limited with NetFrameworkBase.System.UnhandledExceptionEventHandler;
limited with NetFrameworkBase.System.Reflection.AssemblyName;
limited with NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess;
limited with NetFrameworkBase.System.Security.Policy.Evidence;
limited with NetFrameworkBase.System.Security.PermissionSet;
limited with NetFrameworkBase.System.Reflection.BindingFlags;
limited with NetFrameworkBase.System.Reflection.Binder;
limited with NetFrameworkBase.System.Globalization.CultureInfo;
limited with NetFrameworkBase.System.Security.Policy.PolicyLevel;
limited with NetFrameworkBase.System.Security.Principal.IPrincipal;
limited with NetFrameworkBase.System.Security.Principal.PrincipalPolicy;
limited with NetFrameworkBase.System.CrossAppDomainDelegate;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder;
limited with NetFrameworkBase.System.Runtime.Remoting.ObjectHandle;
limited with NetFrameworkBase.System.Reflection.Assembly;
with NetFrameworkWin32;
with NetFrameworkAdaRuntime;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.IAppDomain is
   
   type Kind is interface and NetFrameworkWin32.IUnknown;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array (Natural range <>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function GetTypeInfoCount
      (
         this : in out IAppDomain.Kind;
         pcTInfo : NetFrameworkBase.UInt32
      ) return HResult is abstract;
      
      function GetTypeInfo
      (
         this : in out IAppDomain.Kind;
         iTInfo : NetFrameworkBase.UInt32;
         lcid : NetFrameworkBase.UInt32;
         ppTInfo : NetFrameworkBase.IntPtr
      ) return HResult is abstract;
      
      function GetIDsOfNames
      (
         this : in out IAppDomain.Kind;
         riid : NetFrameworkBase.System.Guid.Kind_Ptr;
         rgszNames : NetFrameworkBase.IntPtr;
         cNames : NetFrameworkBase.UInt32;
         lcid : NetFrameworkBase.UInt32;
         rgDispId : NetFrameworkBase.IntPtr
      ) return HResult is abstract;
      
      function Invoke
      (
         this : in out IAppDomain.Kind;
         dispIdMember : NetFrameworkBase.UInt32;
         riid : NetFrameworkBase.System.Guid.Kind_Ptr;
         lcid : NetFrameworkBase.UInt32;
         wFlags : NetFrameworkBase.Int16;
         pDispParams : NetFrameworkBase.IntPtr;
         pVarResult : NetFrameworkBase.IntPtr;
         pExcepInfo : NetFrameworkBase.IntPtr;
         puArgErr : NetFrameworkBase.IntPtr
      ) return HResult is abstract;
      
      function ToString
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function Equals
      (
         this : in out IAppDomain.Kind;
         other : NetFrameworkBase.System.Object.Kind_Ptr;
         RetVal : access NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
      function GetHashCode
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function GetType
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.System.Type_x.Kind_Ptr
      ) return HResult is abstract;
      
      function InitializeLifetimeService
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function GetLifetimeService
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function get_Evidence
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr
      ) return HResult is abstract;
      
      function add_DomainUnload
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_DomainUnload
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function add_AssemblyLoad
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.AssemblyLoadEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_AssemblyLoad
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.AssemblyLoadEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function add_ProcessExit
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_ProcessExit
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function add_TypeResolve
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.ResolveEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_TypeResolve
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.ResolveEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function add_ResourceResolve
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.ResolveEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_ResourceResolve
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.ResolveEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function add_AssemblyResolve
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.ResolveEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_AssemblyResolve
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.ResolveEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function add_UnhandledException
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.UnhandledExceptionEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function remove_UnhandledException
      (
         this : in out IAppDomain.Kind;
         value : NetFrameworkBase.System.UnhandledExceptionEventHandler.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         dir : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         evidence : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         requiredPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         optionalPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         refusedPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         dir : NetFrameworkBase.BSTR;
         evidence : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         dir : NetFrameworkBase.BSTR;
         requiredPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         optionalPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         refusedPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         evidence : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         requiredPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         optionalPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         refusedPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         dir : NetFrameworkBase.BSTR;
         evidence : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         requiredPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         optionalPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         refusedPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function DefineDynamicAssembly
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         access_x : NetFrameworkBase.System.Reflection.Emit.AssemblyBuilderAccess.Kind;
         dir : NetFrameworkBase.BSTR;
         evidence : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         requiredPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         optionalPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         refusedPermissions : NetFrameworkBase.System.Security.PermissionSet.Kind_Ptr;
         isSynchronized : NetFrameworkBase.Boolean;
         RetVal : access NetFrameworkBase.System.Reflection.Emit.AssemblyBuilder.Kind_Ptr
      ) return HResult is abstract;
      
      function CreateInstance
      (
         this : in out IAppDomain.Kind;
         assemblyName : NetFrameworkBase.BSTR;
         typeName : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.System.Runtime.Remoting.ObjectHandle.Kind_Ptr
      ) return HResult is abstract;
      
      function CreateInstanceFrom
      (
         this : in out IAppDomain.Kind;
         assemblyFile : NetFrameworkBase.BSTR;
         typeName : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.System.Runtime.Remoting.ObjectHandle.Kind_Ptr
      ) return HResult is abstract;
      
      function CreateInstance
      (
         this : in out IAppDomain.Kind;
         assemblyName : NetFrameworkBase.BSTR;
         typeName : NetFrameworkBase.BSTR;
         activationAttributes : NetFrameworkBase.System.Object.Kind_Array;
         RetVal : access NetFrameworkBase.System.Runtime.Remoting.ObjectHandle.Kind_Ptr
      ) return HResult is abstract;
      
      function CreateInstanceFrom
      (
         this : in out IAppDomain.Kind;
         assemblyFile : NetFrameworkBase.BSTR;
         typeName : NetFrameworkBase.BSTR;
         activationAttributes : NetFrameworkBase.System.Object.Kind_Array;
         RetVal : access NetFrameworkBase.System.Runtime.Remoting.ObjectHandle.Kind_Ptr
      ) return HResult is abstract;
      
      function CreateInstance
      (
         this : in out IAppDomain.Kind;
         assemblyName : NetFrameworkBase.BSTR;
         typeName : NetFrameworkBase.BSTR;
         ignoreCase : NetFrameworkBase.Boolean;
         bindingAttr : NetFrameworkBase.System.Reflection.BindingFlags.Kind;
         binder : NetFrameworkBase.System.Reflection.Binder.Kind_Ptr;
         args : NetFrameworkBase.System.Object.Kind_Array;
         culture : NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr;
         activationAttributes : NetFrameworkBase.System.Object.Kind_Array;
         securityAttributes : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Runtime.Remoting.ObjectHandle.Kind_Ptr
      ) return HResult is abstract;
      
      function CreateInstanceFrom
      (
         this : in out IAppDomain.Kind;
         assemblyFile : NetFrameworkBase.BSTR;
         typeName : NetFrameworkBase.BSTR;
         ignoreCase : NetFrameworkBase.Boolean;
         bindingAttr : NetFrameworkBase.System.Reflection.BindingFlags.Kind;
         binder : NetFrameworkBase.System.Reflection.Binder.Kind_Ptr;
         args : NetFrameworkBase.System.Object.Kind_Array;
         culture : NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr;
         activationAttributes : NetFrameworkBase.System.Object.Kind_Array;
         securityAttributes : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Runtime.Remoting.ObjectHandle.Kind_Ptr
      ) return HResult is abstract;
      
      function Load
      (
         this : in out IAppDomain.Kind;
         assemblyRef : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr
      ) return HResult is abstract;
      
      function Load
      (
         this : in out IAppDomain.Kind;
         assemblyString : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr
      ) return HResult is abstract;
      
      function Load
      (
         this : in out IAppDomain.Kind;
         rawAssembly : NetFrameworkBase.Byte_Array;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr
      ) return HResult is abstract;
      
      function Load
      (
         this : in out IAppDomain.Kind;
         rawAssembly : NetFrameworkBase.Byte_Array;
         rawSymbolStore : NetFrameworkBase.Byte_Array;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr
      ) return HResult is abstract;
      
      function Load
      (
         this : in out IAppDomain.Kind;
         rawAssembly : NetFrameworkBase.Byte_Array;
         rawSymbolStore : NetFrameworkBase.Byte_Array;
         securityEvidence : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr
      ) return HResult is abstract;
      
      function Load
      (
         this : in out IAppDomain.Kind;
         assemblyRef : NetFrameworkBase.System.Reflection.AssemblyName.Kind_Ptr;
         assemblySecurity : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr
      ) return HResult is abstract;
      
      function Load
      (
         this : in out IAppDomain.Kind;
         assemblyString : NetFrameworkBase.BSTR;
         assemblySecurity : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr
      ) return HResult is abstract;
      
      function ExecuteAssembly
      (
         this : in out IAppDomain.Kind;
         assemblyFile : NetFrameworkBase.BSTR;
         assemblySecurity : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         RetVal : access NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function ExecuteAssembly
      (
         this : in out IAppDomain.Kind;
         assemblyFile : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function ExecuteAssembly
      (
         this : in out IAppDomain.Kind;
         assemblyFile : NetFrameworkBase.BSTR;
         assemblySecurity : NetFrameworkBase.System.Security.Policy.Evidence.Kind_Ptr;
         args : NetFrameworkBase.BSTR_Array;
         RetVal : access NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function get_FriendlyName
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function get_BaseDirectory
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function get_RelativeSearchPath
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function get_ShadowCopyFiles
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
      function GetAssemblies
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.System.Reflection.Assembly.Kind_Array
      ) return HResult is abstract;
      
      function AppendPrivatePath
      (
         this : in out IAppDomain.Kind;
         path : NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function ClearPrivatePath
      (
         this : in out IAppDomain.Kind
      ) return HResult is abstract;
      
      function SetShadowCopyPath
      (
         this : in out IAppDomain.Kind;
         s : NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function ClearShadowCopyPath
      (
         this : in out IAppDomain.Kind
      ) return HResult is abstract;
      
      function SetCachePath
      (
         this : in out IAppDomain.Kind;
         s : NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function SetData
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.BSTR;
         data : NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function GetData
      (
         this : in out IAppDomain.Kind;
         name : NetFrameworkBase.BSTR;
         RetVal : access NetFrameworkBase.System.Object.Kind_Ptr
      ) return HResult is abstract;
      
      function SetAppDomainPolicy
      (
         this : in out IAppDomain.Kind;
         domainPolicy : NetFrameworkBase.System.Security.Policy.PolicyLevel.Kind_Ptr
      ) return HResult is abstract;
      
      function SetThreadPrincipal
      (
         this : in out IAppDomain.Kind;
         principal : NetFrameworkBase.System.Security.Principal.IPrincipal.Kind_Ptr
      ) return HResult is abstract;
      
      function SetPrincipalPolicy
      (
         this : in out IAppDomain.Kind;
         policy : NetFrameworkBase.System.Security.Principal.PrincipalPolicy.Kind
      ) return HResult is abstract;
      
      function DoCallBack
      (
         this : in out IAppDomain.Kind;
         theDelegate : NetFrameworkBase.System.CrossAppDomainDelegate.Kind_Ptr
      ) return HResult is abstract;
      
      function get_DynamicDirectory
      (
         this : in out IAppDomain.Kind;
         RetVal : access NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
   private
   
      This_AssemblyFile : constant Standard.Wide_String := "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll";
      This_AssemblyName : constant Standard.Wide_String := "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
      This_TypeName     : constant Standard.Wide_String := "System._AppDomain";
   
end;
