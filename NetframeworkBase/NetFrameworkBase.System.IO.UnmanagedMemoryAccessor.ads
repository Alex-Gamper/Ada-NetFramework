--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Decimal;
limited with NetFrameworkBase.System.Runtime.InteropServices.SafeBuffer;
limited with NetFrameworkBase.System.IO.FileAccess;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.IO.UnmanagedMemoryAccessor is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Capacity
      (
         this : in out UnmanagedMemoryAccessor.Kind
      )
      return NetFrameworkBase.Int64;
      
      function CanRead
      (
         this : in out UnmanagedMemoryAccessor.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function CanWrite
      (
         this : in out UnmanagedMemoryAccessor.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure Dispose
      (
         this : in out UnmanagedMemoryAccessor.Kind
      );
      
      function ReadBoolean
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Boolean;
      
      function ReadByte
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Byte;
      
      function ReadDecimal
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.System.Decimal.Kind_Ptr;
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Boolean
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Byte
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.System.Decimal.Kind_Ptr
      );
      
      function ReadChar
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Wide_Char;
      
      function ReadInt16
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Int16;
      
      function ReadInt32
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Int32;
      
      function ReadInt64
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Int64;
      
      function ReadSingle
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Single;
      
      function ReadDouble
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.Double;
      
      function ReadSByte
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.SByte;
      
      function ReadUInt16
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.UInt16;
      
      function ReadUInt32
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.UInt32;
      
      function ReadUInt64
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.UInt64;
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Wide_Char
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Int16
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Int32
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Int64
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Single
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.Double
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.SByte
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.UInt16
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.UInt32
      );
      
      procedure Write
      (
         this : in out UnmanagedMemoryAccessor.Kind;
         position : NetFrameworkBase.Int64; 
         value : NetFrameworkBase.UInt64
      );
      
      function Constructor
      (
         buffer : NetFrameworkBase.System.Runtime.InteropServices.SafeBuffer.Kind_Ptr;
         offset : NetFrameworkBase.Int64;
         capacity : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.System.IO.UnmanagedMemoryAccessor.Kind_Ptr;
      
      function Constructor
      (
         buffer : NetFrameworkBase.System.Runtime.InteropServices.SafeBuffer.Kind_Ptr;
         offset : NetFrameworkBase.Int64;
         capacity : NetFrameworkBase.Int64;
         access_x : NetFrameworkBase.System.IO.FileAccess.Kind
      )
      return NetFrameworkBase.System.IO.UnmanagedMemoryAccessor.Kind_Ptr;
      
end;
