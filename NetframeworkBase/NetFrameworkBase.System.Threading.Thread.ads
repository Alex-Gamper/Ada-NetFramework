--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Runtime.ConstrainedExecution.CriticalFinalizerObject;
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Threading.CompressedStack;
limited with NetFrameworkBase.System.Threading.ThreadPriority;
limited with NetFrameworkBase.System.TimeSpan;
limited with NetFrameworkBase.System.Threading.ApartmentState;
limited with NetFrameworkBase.System.LocalDataStoreSlot;
limited with NetFrameworkBase.System.Security.Principal.IPrincipal;
limited with NetFrameworkBase.System.Globalization.CultureInfo;
limited with NetFrameworkBase.System.Threading.ThreadStart;
limited with NetFrameworkBase.System.Threading.ParameterizedThreadStart;
limited with NetFrameworkBase.System.Threading.ExecutionContext;
limited with NetFrameworkBase.System.Threading.ThreadState;
limited with NetFrameworkBase.System.Runtime.Remoting.Contexts.Context;
limited with NetFrameworkBase.System.AppDomain;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Threading.Thread is
   
   type Kind is new NetFrameworkBase.System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function GetHashCode
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure Start
      (
         this : in out Thread.Kind
      );
      
      procedure Start
      (
         this : in out Thread.Kind;
         parameter : NetFrameworkBase.System.Object.Kind_Ptr
      );
      
      function ExecutionContext
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Threading.ExecutionContext.Kind_Ptr;
      
      procedure SetCompressedStack
      (
         this : in out Thread.Kind;
         stack : NetFrameworkBase.System.Threading.CompressedStack.Kind_Ptr
      );
      
      function GetCompressedStack
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Threading.CompressedStack.Kind_Ptr;
      
      procedure Abort_x
      (
         this : in out Thread.Kind;
         stateInfo : NetFrameworkBase.System.Object.Kind_Ptr
      );
      
      procedure Abort_x
      (
         this : in out Thread.Kind
      );
      
      procedure ResetAbort
      ;
      
      procedure Suspend
      (
         this : in out Thread.Kind
      );
      
      procedure Resume
      (
         this : in out Thread.Kind
      );
      
      procedure Interrupt
      (
         this : in out Thread.Kind
      );
      
      function Priority
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Threading.ThreadPriority.Kind;
      
      procedure Priority
      (
         this : in out Thread.Kind;
         value : NetFrameworkBase.System.Threading.ThreadPriority.Kind
      );
      
      procedure Join
      (
         this : in out Thread.Kind
      );
      
      function Join
      (
         this : in out Thread.Kind;
         millisecondsTimeout : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Boolean;
      
      function Join
      (
         this : in out Thread.Kind;
         timeout : NetFrameworkBase.System.TimeSpan.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      procedure Sleep
      (
         millisecondsTimeout : NetFrameworkBase.Int32
      )
      ;
      
      procedure Sleep
      (
         timeout : NetFrameworkBase.System.TimeSpan.Kind_Ptr
      )
      ;
      
      procedure SpinWait
      (
         iterations : NetFrameworkBase.Int32
      )
      ;
      
      function Yield
      return NetFrameworkBase.Boolean;
      
      function CurrentThread
      return NetFrameworkBase.System.Threading.Thread.Kind_Ptr;
      
      function IsBackground
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure IsBackground
      (
         this : in out Thread.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function ThreadState
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Threading.ThreadState.Kind;
      
      function ApartmentState
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Threading.ApartmentState.Kind;
      
      procedure ApartmentState
      (
         this : in out Thread.Kind;
         value : NetFrameworkBase.System.Threading.ApartmentState.Kind
      );
      
      function GetApartmentState
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Threading.ApartmentState.Kind;
      
      function TrySetApartmentState
      (
         this : in out Thread.Kind;
         state : NetFrameworkBase.System.Threading.ApartmentState.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure SetApartmentState
      (
         this : in out Thread.Kind;
         state : NetFrameworkBase.System.Threading.ApartmentState.Kind
      );
      
      function AllocateDataSlot
      return NetFrameworkBase.System.LocalDataStoreSlot.Kind_Ptr;
      
      function AllocateNamedDataSlot
      (
         name : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.LocalDataStoreSlot.Kind_Ptr;
      
      function GetNamedDataSlot
      (
         name : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.LocalDataStoreSlot.Kind_Ptr;
      
      procedure FreeNamedDataSlot
      (
         name : NetFrameworkBase.BSTR
      )
      ;
      
      function GetData
      (
         slot : NetFrameworkBase.System.LocalDataStoreSlot.Kind_Ptr
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure SetData
      (
         slot : NetFrameworkBase.System.LocalDataStoreSlot.Kind_Ptr; 
         data : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      function CurrentUICulture
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr;
      
      function CurrentCulture
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr;
      
      function CurrentContext
      return NetFrameworkBase.System.Runtime.Remoting.Contexts.Context.Kind_Ptr;
      
      function CurrentPrincipal
      return NetFrameworkBase.System.Security.Principal.IPrincipal.Kind_Ptr;
      
      procedure CurrentPrincipal
      (
         value : NetFrameworkBase.System.Security.Principal.IPrincipal.Kind_Ptr
      )
      ;
      
      function GetDomain
      return NetFrameworkBase.System.AppDomain.Kind_Ptr;
      
      function GetDomainID
      return NetFrameworkBase.Int32;
      
      function Name
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure Name
      (
         this : in out Thread.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function VolatileRead
      (
         address : NetFrameworkBase.Byte_Ptr
      )
      return NetFrameworkBase.Byte;
      
      function VolatileRead
      (
         address : NetFrameworkBase.Int16_Ptr
      )
      return NetFrameworkBase.Int16;
      
      function VolatileRead
      (
         address : NetFrameworkBase.Int32_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function VolatileRead
      (
         address : NetFrameworkBase.Int64_Ptr
      )
      return NetFrameworkBase.Int64;
      
      function VolatileRead
      (
         address : NetFrameworkBase.SByte_Ptr
      )
      return NetFrameworkBase.SByte;
      
      function VolatileRead
      (
         address : NetFrameworkBase.UInt16_Ptr
      )
      return NetFrameworkBase.UInt16;
      
      function VolatileRead
      (
         address : NetFrameworkBase.UInt32_Ptr
      )
      return NetFrameworkBase.UInt32;
      
      function VolatileRead
      (
         address : NetFrameworkBase.IntPtr_Ptr
      )
      return NetFrameworkBase.IntPtr;
      
      function VolatileRead
      (
         address : NetFrameworkBase.UIntPtr_Ptr
      )
      return NetFrameworkBase.UIntPtr;
      
      function VolatileRead
      (
         address : NetFrameworkBase.UInt64_Ptr
      )
      return NetFrameworkBase.UInt64;
      
      function VolatileRead
      (
         address : NetFrameworkBase.Single_Ptr
      )
      return NetFrameworkBase.Single;
      
      function VolatileRead
      (
         address : NetFrameworkBase.Double_Ptr
      )
      return NetFrameworkBase.Double;
      
      function VolatileRead
      (
         address : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.Byte_Ptr; 
         value : NetFrameworkBase.Byte
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.Int16_Ptr; 
         value : NetFrameworkBase.Int16
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.Int32_Ptr; 
         value : NetFrameworkBase.Int32
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.Int64_Ptr; 
         value : NetFrameworkBase.Int64
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.SByte_Ptr; 
         value : NetFrameworkBase.SByte
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.UInt16_Ptr; 
         value : NetFrameworkBase.UInt16
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.UInt32_Ptr; 
         value : NetFrameworkBase.UInt32
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.IntPtr_Ptr; 
         value : NetFrameworkBase.IntPtr
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.UIntPtr_Ptr; 
         value : NetFrameworkBase.UIntPtr
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.UInt64_Ptr; 
         value : NetFrameworkBase.UInt64
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.Single_Ptr; 
         value : NetFrameworkBase.Single
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.Double_Ptr; 
         value : NetFrameworkBase.Double
      )
      ;
      
      procedure VolatileWrite
      (
         address : NetFrameworkBase.System.Object.Kind_Ptr; 
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure MemoryBarrier
      ;
      
      function ManagedThreadId
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.Int32;
      
      function IsAlive
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsThreadPoolThread
      (
         this : in out Thread.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure DisableComObjectEagerCleanup
      (
         this : in out Thread.Kind
      );
      
      procedure CurrentUICulture
      (
         this : in out Thread.Kind;
         value : NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr
      );
      
      procedure CurrentCulture
      (
         this : in out Thread.Kind;
         value : NetFrameworkBase.System.Globalization.CultureInfo.Kind_Ptr
      );
      
      procedure BeginCriticalRegion
      ;
      
      procedure EndCriticalRegion
      ;
      
      procedure BeginThreadAffinity
      ;
      
      procedure EndThreadAffinity
      ;
      
      function Constructor
      (
         start : NetFrameworkBase.System.Threading.ThreadStart.Kind_Ptr
      )
      return NetFrameworkBase.System.Threading.Thread.Kind_Ptr;
      
      function Constructor
      (
         start : NetFrameworkBase.System.Threading.ThreadStart.Kind_Ptr;
         maxStackSize : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Threading.Thread.Kind_Ptr;
      
      function Constructor
      (
         start : NetFrameworkBase.System.Threading.ParameterizedThreadStart.Kind_Ptr
      )
      return NetFrameworkBase.System.Threading.Thread.Kind_Ptr;
      
      function Constructor
      (
         start : NetFrameworkBase.System.Threading.ParameterizedThreadStart.Kind_Ptr;
         maxStackSize : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Threading.Thread.Kind_Ptr;
      
end;
