--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.ComponentModel.Component;
limited with NetFrameworkBase.System.Security.SecureString;
limited with NetFrameworkBase.System.Diagnostics.ProcessStartInfo;
limited with NetFrameworkBase.System.Diagnostics.DataReceivedEventHandler;
limited with NetFrameworkBase.System.Diagnostics.ProcessPriorityClass;
limited with NetFrameworkBase.System.ComponentModel.ISynchronizeInvoke;
limited with NetFrameworkBase.System.EventHandler;
limited with NetFrameworkBase.Microsoft.Win32.SafeHandles.SafeProcessHandle;
limited with NetFrameworkBase.System.Diagnostics.ProcessModule;
limited with NetFrameworkBase.System.Diagnostics.ProcessModuleCollection;
limited with NetFrameworkBase.System.TimeSpan;
limited with NetFrameworkBase.System.Diagnostics.ProcessThreadCollection;
limited with NetFrameworkBase.System.IO.StreamWriter;
limited with NetFrameworkBase.System.IO.StreamReader;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Diagnostics.Process is
   
   type Kind is new NetFrameworkBase.System.ComponentModel.Component.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Start
      (
         fileName : NetFrameworkBase.BSTR; 
         userName : NetFrameworkBase.BSTR; 
         password : NetFrameworkBase.System.Security.SecureString.Kind_Ptr; 
         domain : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      function Start
      (
         fileName : NetFrameworkBase.BSTR; 
         arguments : NetFrameworkBase.BSTR; 
         userName : NetFrameworkBase.BSTR; 
         password : NetFrameworkBase.System.Security.SecureString.Kind_Ptr; 
         domain : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      function Start
      (
         fileName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      function Start
      (
         fileName : NetFrameworkBase.BSTR; 
         arguments : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      function Start
      (
         startInfo : NetFrameworkBase.System.Diagnostics.ProcessStartInfo.Kind_Ptr
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      procedure add_OutputDataReceived
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.Diagnostics.DataReceivedEventHandler.Kind_Ptr
      );
      
      procedure remove_OutputDataReceived
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.Diagnostics.DataReceivedEventHandler.Kind_Ptr
      );
      
      procedure add_ErrorDataReceived
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.Diagnostics.DataReceivedEventHandler.Kind_Ptr
      );
      
      procedure remove_ErrorDataReceived
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.Diagnostics.DataReceivedEventHandler.Kind_Ptr
      );
      
      function BasePriority
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function ExitCode
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function HasExited
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function ExitTime
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Date;
      
      function Handle
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      function SafeHandle
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Microsoft.Win32.SafeHandles.SafeProcessHandle.Kind_Ptr;
      
      function HandleCount
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Id
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function MachineName
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function MainWindowHandle
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      function MainWindowTitle
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function MainModule
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.Diagnostics.ProcessModule.Kind_Ptr;
      
      function MaxWorkingSet
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      procedure MaxWorkingSet
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.IntPtr
      );
      
      function MinWorkingSet
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      procedure MinWorkingSet
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.IntPtr
      );
      
      function Modules
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.Diagnostics.ProcessModuleCollection.Kind_Ptr;
      
      function NonpagedSystemMemorySize
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function NonpagedSystemMemorySize64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function PagedMemorySize
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function PagedMemorySize64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function PagedSystemMemorySize
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function PagedSystemMemorySize64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function PeakPagedMemorySize
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function PeakPagedMemorySize64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function PeakWorkingSet
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function PeakWorkingSet64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function PeakVirtualMemorySize
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function PeakVirtualMemorySize64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function PriorityBoostEnabled
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure PriorityBoostEnabled
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function PriorityClass
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.Diagnostics.ProcessPriorityClass.Kind;
      
      procedure PriorityClass
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.Diagnostics.ProcessPriorityClass.Kind
      );
      
      function PrivateMemorySize
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function PrivateMemorySize64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function PrivilegedProcessorTime
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.TimeSpan.Kind_Ptr;
      
      function ProcessName
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ProcessorAffinity
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      procedure ProcessorAffinity
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.IntPtr
      );
      
      function Responding
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function SessionId
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function StartInfo
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.Diagnostics.ProcessStartInfo.Kind_Ptr;
      
      procedure StartInfo
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.Diagnostics.ProcessStartInfo.Kind_Ptr
      );
      
      function StartTime
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Date;
      
      function SynchronizingObject
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.ComponentModel.ISynchronizeInvoke.Kind_Ptr;
      
      procedure SynchronizingObject
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.ComponentModel.ISynchronizeInvoke.Kind_Ptr
      );
      
      function Threads
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.Diagnostics.ProcessThreadCollection.Kind_Ptr;
      
      function TotalProcessorTime
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.TimeSpan.Kind_Ptr;
      
      function UserProcessorTime
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.TimeSpan.Kind_Ptr;
      
      function VirtualMemorySize
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function VirtualMemorySize64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      function EnableRaisingEvents
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure EnableRaisingEvents
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function StandardInput
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.IO.StreamWriter.Kind_Ptr;
      
      function StandardOutput
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.IO.StreamReader.Kind_Ptr;
      
      function StandardError
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.System.IO.StreamReader.Kind_Ptr;
      
      function WorkingSet
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int32;
      
      function WorkingSet64
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Int64;
      
      procedure add_Exited
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      );
      
      procedure remove_Exited
      (
         this : in out Process.Kind;
         value : NetFrameworkBase.System.EventHandler.Kind_Ptr
      );
      
      function CloseMainWindow
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure Close
      (
         this : in out Process.Kind
      );
      
      procedure EnterDebugMode
      ;
      
      procedure LeaveDebugMode
      ;
      
      function GetProcessById
      (
         processId : NetFrameworkBase.Int32; 
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      function GetProcessById
      (
         processId : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      function GetProcesses
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Array;
      
      procedure Refresh
      (
         this : in out Process.Kind
      );
      
      function Start
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure Kill
      (
         this : in out Process.Kind
      );
      
      function ToString
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function WaitForExit
      (
         this : in out Process.Kind;
         milliseconds : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Boolean;
      
      procedure WaitForExit
      (
         this : in out Process.Kind
      );
      
      function WaitForInputIdle
      (
         this : in out Process.Kind;
         milliseconds : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Boolean;
      
      function WaitForInputIdle
      (
         this : in out Process.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure BeginOutputReadLine
      (
         this : in out Process.Kind
      );
      
      procedure BeginErrorReadLine
      (
         this : in out Process.Kind
      );
      
      procedure CancelOutputRead
      (
         this : in out Process.Kind
      );
      
      procedure CancelErrorRead
      (
         this : in out Process.Kind
      );
      
      function GetProcessesByName
      (
         processName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Array;
      
      function GetProcessesByName
      (
         processName : NetFrameworkBase.BSTR; 
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Array;
      
      function GetProcesses
      (
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Array;
      
      function GetCurrentProcess
      return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
      function Constructor return NetFrameworkBase.System.Diagnostics.Process.Kind_Ptr;
      
end;
