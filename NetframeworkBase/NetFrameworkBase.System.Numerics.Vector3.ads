--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.ValueType;
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.IFormatProvider;
limited with NetFrameworkBase.System.Numerics.Matrix4x4;
limited with NetFrameworkBase.System.Numerics.Quaternion;
limited with NetFrameworkBase.System.Numerics.Vector2;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Numerics.Vector3 is
   
   type Kind is new NetFrameworkBase.System.ValueType.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Zero
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function One
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function UnitX
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function UnitY
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function UnitZ
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function GetHashCode
      (
         this : in out Vector3.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Equals
      (
         this : in out Vector3.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function ToString
      (
         this : in out Vector3.Kind;
         format : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.BSTR;
      
      function ToString
      (
         this : in out Vector3.Kind;
         format : NetFrameworkBase.BSTR; 
         formatProvider : NetFrameworkBase.System.IFormatProvider.Kind_Ptr
      )
      return NetFrameworkBase.BSTR;
      
      function Length
      (
         this : in out Vector3.Kind
      )
      return NetFrameworkBase.Single;
      
      function LengthSquared
      (
         this : in out Vector3.Kind
      )
      return NetFrameworkBase.Single;
      
      function Distance
      (
         value1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.Single;
      
      function DistanceSquared
      (
         value1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.Single;
      
      function Normalize
      (
         value : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Cross
      (
         vector1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         vector2 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Reflect
      (
         vector : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         normal : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Clamp
      (
         value1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         min : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         max : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Lerp
      (
         value1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         amount : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Transform
      (
         position : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         matrix : NetFrameworkBase.System.Numerics.Matrix4x4.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function TransformNormal
      (
         normal : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         matrix : NetFrameworkBase.System.Numerics.Matrix4x4.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Transform
      (
         value : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         rotation : NetFrameworkBase.System.Numerics.Quaternion.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Add
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Subtract
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Multiply
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Multiply
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Multiply
      (
         left : NetFrameworkBase.Single; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Divide
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Divide
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         divisor : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Negate
      (
         value : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Equals
      (
         this : in out Vector3.Kind;
         other : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Dot
      (
         vector1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         vector2 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.Single;
      
      function Min
      (
         value1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Max
      (
         value1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Abs_x
      (
         value : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function SquareRoot
      (
         value : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function op_Addition
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      function "+"(left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr) return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr renames op_Addition;
      
      function op_Subtraction
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      function "-"(left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr) return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr renames op_Subtraction;
      
      function op_Multiply
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function op_Multiply
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function op_Multiply
      (
         left : NetFrameworkBase.Single; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function op_Division
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function op_Division
      (
         value1 : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         value2 : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function op_UnaryNegation
      (
         value : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      function "-"(value : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr) return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr renames op_UnaryNegation;
      
      function op_Equality
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      function "="(left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr) return NetFrameworkBase.Boolean renames op_Equality;
      
      function op_Inequality
      (
         left : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr; 
         right : NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function ToString
      (
         this : in out Vector3.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure CopyTo
      (
         this : in out Vector3.Kind;
         array_x : NetFrameworkBase.Single_Array
      );
      
      procedure CopyTo
      (
         this : in out Vector3.Kind;
         array_x : NetFrameworkBase.Single_Array; 
         index : NetFrameworkBase.Int32
      );
      
      function Constructor
      (
         value : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Constructor
      (
         value : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr;
         z : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
      function Constructor
      (
         x : NetFrameworkBase.Single;
         y : NetFrameworkBase.Single;
         z : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Vector3.Kind_Ptr;
      
end;
