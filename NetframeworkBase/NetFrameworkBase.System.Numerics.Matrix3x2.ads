--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.ValueType;
limited with NetFrameworkBase.System.Numerics.Vector2;
with NetFrameworkBase.System.Object;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Numerics.Matrix3x2 is
   
   type Kind is new NetFrameworkBase.System.ValueType.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Identity
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function IsIdentity
      (
         this : in out Matrix3x2.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Translation
      (
         this : in out Matrix3x2.Kind
      )
      return NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr;
      
      procedure Translation
      (
         this : in out Matrix3x2.Kind;
         value : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      );
      
      function CreateTranslation
      (
         position : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateTranslation
      (
         xPosition : NetFrameworkBase.Single; 
         yPosition : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateScale
      (
         xScale : NetFrameworkBase.Single; 
         yScale : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateScale
      (
         xScale : NetFrameworkBase.Single; 
         yScale : NetFrameworkBase.Single; 
         centerPoint : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateScale
      (
         scales : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateScale
      (
         scales : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr; 
         centerPoint : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateScale
      (
         scale : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateScale
      (
         scale : NetFrameworkBase.Single; 
         centerPoint : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateSkew
      (
         radiansX : NetFrameworkBase.Single; 
         radiansY : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateSkew
      (
         radiansX : NetFrameworkBase.Single; 
         radiansY : NetFrameworkBase.Single; 
         centerPoint : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateRotation
      (
         radians : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function CreateRotation
      (
         radians : NetFrameworkBase.Single; 
         centerPoint : NetFrameworkBase.System.Numerics.Vector2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function GetDeterminant
      (
         this : in out Matrix3x2.Kind
      )
      return NetFrameworkBase.Single;
      
      function Invert
      (
         matrix : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         result : out NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Lerp
      (
         matrix1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         matrix2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         amount : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function Negate
      (
         value : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function Add
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function Subtract
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function Multiply
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function Multiply
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function op_UnaryNegation
      (
         value : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      function "-"(value : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr) return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr renames op_UnaryNegation;
      
      function op_Addition
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      function "+"(value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr) return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr renames op_Addition;
      
      function op_Subtraction
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      function "-"(value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr) return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr renames op_Subtraction;
      
      function op_Multiply
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function op_Multiply
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
      function op_Equality
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      function "="(value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr) return NetFrameworkBase.Boolean renames op_Equality;
      
      function op_Inequality
      (
         value1 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr; 
         value2 : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Equals
      (
         this : in out Matrix3x2.Kind;
         other : NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Equals
      (
         this : in out Matrix3x2.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetHashCode
      (
         this : in out Matrix3x2.Kind
      )
      return NetFrameworkBase.Int32;
      
      function ToString
      (
         this : in out Matrix3x2.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Constructor
      (
         m11 : NetFrameworkBase.Single;
         m12 : NetFrameworkBase.Single;
         m21 : NetFrameworkBase.Single;
         m22 : NetFrameworkBase.Single;
         m31 : NetFrameworkBase.Single;
         m32 : NetFrameworkBase.Single
      )
      return NetFrameworkBase.System.Numerics.Matrix3x2.Kind_Ptr;
      
end;
