--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Xml.XmlReader;
limited with NetFrameworkBase.System.Xml.Xsl.XsltSettings;
limited with NetFrameworkBase.System.Xml.XmlResolver;
limited with NetFrameworkBase.System.Xml.XPath.IXPathNavigable;
limited with NetFrameworkBase.System.Reflection.Emit.TypeBuilder;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Reflection.MethodInfo;
limited with NetFrameworkBase.System.Xml.XmlWriter;
limited with NetFrameworkBase.System.Xml.Xsl.XsltArgumentList;
limited with NetFrameworkBase.System.IO.TextWriter;
limited with NetFrameworkBase.System.IO.Stream;
limited with NetFrameworkBase.System.Xml.XmlWriterSettings;
limited with NetFrameworkBase.System.CodeDom.Compiler.TempFileCollection;
limited with NetFrameworkBase.System.CodeDom.Compiler.CompilerErrorCollection;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Xml.Xsl.XslCompiledTransform is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function OutputSettings
      (
         this : in out XslCompiledTransform.Kind
      )
      return NetFrameworkBase.System.Xml.XmlWriterSettings.Kind_Ptr;
      
      function TemporaryFiles
      (
         this : in out XslCompiledTransform.Kind
      )
      return NetFrameworkBase.System.CodeDom.Compiler.TempFileCollection.Kind_Ptr;
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         stylesheet : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr; 
         settings : NetFrameworkBase.System.Xml.Xsl.XsltSettings.Kind_Ptr; 
         stylesheetResolver : NetFrameworkBase.System.Xml.XmlResolver.Kind_Ptr
      );
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         stylesheet : NetFrameworkBase.System.Xml.XPath.IXPathNavigable.Kind_Ptr; 
         settings : NetFrameworkBase.System.Xml.Xsl.XsltSettings.Kind_Ptr; 
         stylesheetResolver : NetFrameworkBase.System.Xml.XmlResolver.Kind_Ptr
      );
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         stylesheetUri : NetFrameworkBase.BSTR; 
         settings : NetFrameworkBase.System.Xml.Xsl.XsltSettings.Kind_Ptr; 
         stylesheetResolver : NetFrameworkBase.System.Xml.XmlResolver.Kind_Ptr
      );
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         stylesheet : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr
      );
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         stylesheet : NetFrameworkBase.System.Xml.XPath.IXPathNavigable.Kind_Ptr
      );
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         stylesheetUri : NetFrameworkBase.BSTR
      );
      
      function CompileToType
      (
         stylesheet : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr; 
         settings : NetFrameworkBase.System.Xml.Xsl.XsltSettings.Kind_Ptr; 
         stylesheetResolver : NetFrameworkBase.System.Xml.XmlResolver.Kind_Ptr; 
         debug : NetFrameworkBase.Boolean; 
         typeBuilder : NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr; 
         scriptAssemblyPath : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.CodeDom.Compiler.CompilerErrorCollection.Kind_Ptr;
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         compiledStylesheet : NetFrameworkBase.System.Type_x.Kind_Ptr
      );
      
      procedure Load
      (
         this : in out XslCompiledTransform.Kind;
         executeMethod : NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr; 
         queryData : NetFrameworkBase.Byte_Array; 
         earlyBoundTypes : NetFrameworkBase.System.Type_x.Kind_Array
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XPath.IXPathNavigable.Kind_Ptr; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XPath.IXPathNavigable.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XPath.IXPathNavigable.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.IO.TextWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XPath.IXPathNavigable.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.IO.Stream.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.IO.TextWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.IO.Stream.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         inputUri : NetFrameworkBase.BSTR; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         inputUri : NetFrameworkBase.BSTR; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         inputUri : NetFrameworkBase.BSTR; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.IO.TextWriter.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         inputUri : NetFrameworkBase.BSTR; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.IO.Stream.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         inputUri : NetFrameworkBase.BSTR; 
         resultsFile : NetFrameworkBase.BSTR
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XmlReader.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr; 
         documentResolver : NetFrameworkBase.System.Xml.XmlResolver.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out XslCompiledTransform.Kind;
         input : NetFrameworkBase.System.Xml.XPath.IXPathNavigable.Kind_Ptr; 
         arguments : NetFrameworkBase.System.Xml.Xsl.XsltArgumentList.Kind_Ptr; 
         results : NetFrameworkBase.System.Xml.XmlWriter.Kind_Ptr; 
         documentResolver : NetFrameworkBase.System.Xml.XmlResolver.Kind_Ptr
      );
      
      function Constructor return NetFrameworkBase.System.Xml.Xsl.XslCompiledTransform.Kind_Ptr;
      
      function Constructor
      (
         enableDebug : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Xml.Xsl.XslCompiledTransform.Kind_Ptr;
      
end;
