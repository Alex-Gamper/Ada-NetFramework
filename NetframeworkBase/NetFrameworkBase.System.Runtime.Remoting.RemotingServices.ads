--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodMessage;
limited with NetFrameworkBase.System.MarshalByRefObject;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Runtime.Serialization.SerializationInfo;
limited with NetFrameworkBase.System.Runtime.Serialization.StreamingContext;
limited with NetFrameworkBase.System.Runtime.Remoting.ObjRef;
limited with NetFrameworkBase.System.Reflection.MethodBase;
limited with NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodCallMessage;
limited with NetFrameworkBase.System.Runtime.Remoting.Messaging.IMessageSink;
limited with NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodReturnMessage;
limited with NetFrameworkBase.System.Runtime.Remoting.Proxies.RealProxy;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Runtime.Remoting.RemotingServices is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function IsObjectOutOfContext
      (
         tp : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsObjectOutOfAppDomain
      (
         tp : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetSessionIdForMethodMessage
      (
         msg : NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodMessage.Kind_Ptr
      )
      return NetFrameworkBase.BSTR;
      
      function GetLifetimeService
      (
         obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetObjectUri
      (
         obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr
      )
      return NetFrameworkBase.BSTR;
      
      procedure SetObjectUriForMarshal
      (
         obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr; 
         uri : NetFrameworkBase.BSTR
      )
      ;
      
      function Marshal
      (
         Obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr
      )
      return NetFrameworkBase.System.Runtime.Remoting.ObjRef.Kind_Ptr;
      
      function Marshal
      (
         Obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr; 
         URI : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Runtime.Remoting.ObjRef.Kind_Ptr;
      
      function Marshal
      (
         Obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr; 
         ObjURI : NetFrameworkBase.BSTR; 
         RequestedType : NetFrameworkBase.System.Type_x.Kind_Ptr
      )
      return NetFrameworkBase.System.Runtime.Remoting.ObjRef.Kind_Ptr;
      
      procedure GetObjectData
      (
         obj : NetFrameworkBase.System.Object.Kind_Ptr; 
         info : NetFrameworkBase.System.Runtime.Serialization.SerializationInfo.Kind_Ptr; 
         context : NetFrameworkBase.System.Runtime.Serialization.StreamingContext.Kind_Ptr
      )
      ;
      
      function Unmarshal
      (
         objectRef : NetFrameworkBase.System.Runtime.Remoting.ObjRef.Kind_Ptr
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function Unmarshal
      (
         objectRef : NetFrameworkBase.System.Runtime.Remoting.ObjRef.Kind_Ptr; 
         fRefine : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function Connect
      (
         classToProxy : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         url : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function Connect
      (
         classToProxy : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         url : NetFrameworkBase.BSTR; 
         data : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function Disconnect
      (
         obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetEnvoyChainForProxy
      (
         obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr
      )
      return NetFrameworkBase.System.Runtime.Remoting.Messaging.IMessageSink.Kind_Ptr;
      
      function GetObjRefForProxy
      (
         obj : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr
      )
      return NetFrameworkBase.System.Runtime.Remoting.ObjRef.Kind_Ptr;
      
      function GetMethodBaseFromMethodMessage
      (
         msg : NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodMessage.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.MethodBase.Kind_Ptr;
      
      function IsMethodOverloaded
      (
         msg : NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodMessage.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOneWay
      (
         method : NetFrameworkBase.System.Reflection.MethodBase.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetServerTypeForUri
      (
         URI : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Type_x.Kind_Ptr;
      
      function ExecuteMessage
      (
         target : NetFrameworkBase.System.MarshalByRefObject.Kind_Ptr; 
         reqMsg : NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodCallMessage.Kind_Ptr
      )
      return NetFrameworkBase.System.Runtime.Remoting.Messaging.IMethodReturnMessage.Kind_Ptr;
      
      procedure LogRemotingStage
      (
         stage : NetFrameworkBase.Int32
      )
      ;
      
      function IsTransparentProxy
      (
         proxy : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetRealProxy
      (
         proxy : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.Runtime.Remoting.Proxies.RealProxy.Kind_Ptr;
      
end;
