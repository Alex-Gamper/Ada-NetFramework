--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.AsyncCallback;
limited with NetFrameworkBase.System.IAsyncResult;
limited with NetFrameworkBase.System.Net.IPEndPoint;
limited with NetFrameworkBase.System.Net.IPAddress;
limited with NetFrameworkBase.System.Net.Sockets.Socket;
limited with NetFrameworkBase.System.Net.EndPoint;
limited with NetFrameworkBase.System.Net.Sockets.TcpClient;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Net.Sockets.TcpListener is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Server
      (
         this : in out TcpListener.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function LocalEndpoint
      (
         this : in out TcpListener.Kind
      )
      return NetFrameworkBase.System.Net.EndPoint.Kind_Ptr;
      
      function ExclusiveAddressUse
      (
         this : in out TcpListener.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure ExclusiveAddressUse
      (
         this : in out TcpListener.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      procedure AllowNatTraversal
      (
         this : in out TcpListener.Kind;
         allowed : NetFrameworkBase.Boolean
      );
      
      procedure Start
      (
         this : in out TcpListener.Kind
      );
      
      function Pending
      (
         this : in out TcpListener.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Create
      (
         port : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Net.Sockets.TcpListener.Kind_Ptr;
      
      procedure Start
      (
         this : in out TcpListener.Kind;
         backlog : NetFrameworkBase.Int32
      );
      
      procedure Stop
      (
         this : in out TcpListener.Kind
      );
      
      function AcceptSocket
      (
         this : in out TcpListener.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function AcceptTcpClient
      (
         this : in out TcpListener.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.TcpClient.Kind_Ptr;
      
      function BeginAcceptSocket
      (
         this : in out TcpListener.Kind;
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndAcceptSocket
      (
         this : in out TcpListener.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function BeginAcceptTcpClient
      (
         this : in out TcpListener.Kind;
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndAcceptTcpClient
      (
         this : in out TcpListener.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.System.Net.Sockets.TcpClient.Kind_Ptr;
      
      function Constructor
      (
         localEP : NetFrameworkBase.System.Net.IPEndPoint.Kind_Ptr
      )
      return NetFrameworkBase.System.Net.Sockets.TcpListener.Kind_Ptr;
      
      function Constructor
      (
         localaddr : NetFrameworkBase.System.Net.IPAddress.Kind_Ptr;
         port : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Net.Sockets.TcpListener.Kind_Ptr;
      
      function Constructor
      (
         port : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Net.Sockets.TcpListener.Kind_Ptr;
      
end;
