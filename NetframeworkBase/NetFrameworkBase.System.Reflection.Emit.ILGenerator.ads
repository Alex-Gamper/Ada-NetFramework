--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Reflection.Emit.OpCode;
limited with NetFrameworkBase.System.Reflection.MethodInfo;
limited with NetFrameworkBase.System.Reflection.CallingConventions;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Runtime.InteropServices.CallingConvention;
limited with NetFrameworkBase.System.Reflection.Emit.SignatureHelper;
limited with NetFrameworkBase.System.Reflection.ConstructorInfo;
limited with NetFrameworkBase.System.Reflection.Emit.Label;
limited with NetFrameworkBase.System.Reflection.FieldInfo;
limited with NetFrameworkBase.System.Reflection.Emit.LocalBuilder;
limited with NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Reflection.Emit.ILGenerator is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         arg : NetFrameworkBase.Byte
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         arg : NetFrameworkBase.SByte
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         arg : NetFrameworkBase.Int16
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         arg : NetFrameworkBase.Int32
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         meth : NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr
      );
      
      procedure EmitCalli
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         callingConvention : NetFrameworkBase.System.Reflection.CallingConventions.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array; 
         optionalParameterTypes : NetFrameworkBase.System.Type_x.Kind_Array
      );
      
      procedure EmitCalli
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         unmanagedCallConv : NetFrameworkBase.System.Runtime.InteropServices.CallingConvention.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array
      );
      
      procedure EmitCall
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         methodInfo : NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr; 
         optionalParameterTypes : NetFrameworkBase.System.Type_x.Kind_Array
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         signature : NetFrameworkBase.System.Reflection.Emit.SignatureHelper.Kind_Ptr
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         con : NetFrameworkBase.System.Reflection.ConstructorInfo.Kind_Ptr
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         cls : NetFrameworkBase.System.Type_x.Kind_Ptr
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         arg : NetFrameworkBase.Int64
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         arg : NetFrameworkBase.Single
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         arg : NetFrameworkBase.Double
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         label : NetFrameworkBase.System.Reflection.Emit.Label.Kind_Ptr
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         labels : NetFrameworkBase.System.Reflection.Emit.Label.Kind_Array_Ptr
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         field : NetFrameworkBase.System.Reflection.FieldInfo.Kind_Ptr
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         str : NetFrameworkBase.BSTR
      );
      
      procedure Emit
      (
         this : in out ILGenerator.Kind;
         opcode : NetFrameworkBase.System.Reflection.Emit.OpCode.Kind_Ptr; 
         local : NetFrameworkBase.System.Reflection.Emit.LocalBuilder.Kind_Ptr
      );
      
      function BeginExceptionBlock
      (
         this : in out ILGenerator.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.Label.Kind_Ptr;
      
      procedure EndExceptionBlock
      (
         this : in out ILGenerator.Kind
      );
      
      procedure BeginExceptFilterBlock
      (
         this : in out ILGenerator.Kind
      );
      
      procedure BeginCatchBlock
      (
         this : in out ILGenerator.Kind;
         exceptionType : NetFrameworkBase.System.Type_x.Kind_Ptr
      );
      
      procedure BeginFaultBlock
      (
         this : in out ILGenerator.Kind
      );
      
      procedure BeginFinallyBlock
      (
         this : in out ILGenerator.Kind
      );
      
      function DefineLabel
      (
         this : in out ILGenerator.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.Label.Kind_Ptr;
      
      procedure MarkLabel
      (
         this : in out ILGenerator.Kind;
         loc : NetFrameworkBase.System.Reflection.Emit.Label.Kind_Ptr
      );
      
      procedure ThrowException
      (
         this : in out ILGenerator.Kind;
         excType : NetFrameworkBase.System.Type_x.Kind_Ptr
      );
      
      function DeclareLocal
      (
         this : in out ILGenerator.Kind;
         localType : NetFrameworkBase.System.Type_x.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.LocalBuilder.Kind_Ptr;
      
      function DeclareLocal
      (
         this : in out ILGenerator.Kind;
         localType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         pinned : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Reflection.Emit.LocalBuilder.Kind_Ptr;
      
      procedure UsingNamespace
      (
         this : in out ILGenerator.Kind;
         usingNamespace : NetFrameworkBase.BSTR
      );
      
      procedure MarkSequencePoint
      (
         this : in out ILGenerator.Kind;
         document : NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter.Kind_Ptr; 
         startLine : NetFrameworkBase.Int32; 
         startColumn : NetFrameworkBase.Int32; 
         endLine : NetFrameworkBase.Int32; 
         endColumn : NetFrameworkBase.Int32
      );
      
      procedure BeginScope
      (
         this : in out ILGenerator.Kind
      );
      
      procedure EndScope
      (
         this : in out ILGenerator.Kind
      );
      
      function ILOffset
      (
         this : in out ILGenerator.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure EmitWriteLine
      (
         this : in out ILGenerator.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      procedure EmitWriteLine
      (
         this : in out ILGenerator.Kind;
         localBuilder : NetFrameworkBase.System.Reflection.Emit.LocalBuilder.Kind_Ptr
      );
      
      procedure EmitWriteLine
      (
         this : in out ILGenerator.Kind;
         fld : NetFrameworkBase.System.Reflection.FieldInfo.Kind_Ptr
      );
      
end;
