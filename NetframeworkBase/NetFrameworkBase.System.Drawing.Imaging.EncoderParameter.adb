--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
with NetFrameworkBase.System.Drawing.Imaging.Encoder;
with NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType;
with NetFrameworkWin32;              use NetFrameworkWin32;
with NetFrameworkAdaRuntime;         use NetFrameworkAdaRuntime;
with Ada.Unchecked_Conversion;
with Interfaces.C;
--------------------------------------------------------------------------------
package body NetFrameworkBase.System.Drawing.Imaging.EncoderParameter is
   
   use type Interfaces.C.unsigned_short;
   
   This_AssemblyFile : constant Standard.Wide_String := "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\System.Drawing.dll";
   This_AssemblyName : constant Standard.Wide_String := "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
   This_TypeName     : constant Standard.Wide_String := "System.Drawing.Imaging.EncoderParameter";
   TypeInstance      : aliased IType_Ptr := null;
   
   function Instance return IType_Ptr is
   begin
      if TypeInstance = null then
         declare
            Hr          : HRESULT := 0;
            Runtime     : RuntimeHost := Instance;
            Assembly    : IAssembly_Ptr := null;
            TypeName    : NetFrameworkBase.BSTR := To_BSTR(This_TypeName);
         begin
            if IsAssemblyLoaded (RunTime, This_AssemblyName) = false then
               Assembly := LoadAssembly(Runtime, This_AssemblyName);
            else
               Assembly := GetAssembly(Runtime, This_AssemblyName);
            end if;
            Hr := Assembly.GetType_2(TypeName, TypeInstance'access);
            SysFreeString(TypeName);
         end;
      end if;
      return TypeInstance;
   end;
   
   function Encoder
   (
      this : in out EncoderParameter.Kind
   )
   return NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr is
      Hr            : HResult := 0;
      p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      p_Target      : aliased VARIANT;
      p_MethodName  : BSTR := To_BSTR("Encoder");
      p_RetVal      : aliased VARIANT;
      p_NetRetVal   : aliased IUnknown_Ptr := null;
      RetVal        : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind;
   begin
      p_Flags := NetFrameworkWin32.BindingFlags'(Public)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(GetProperty)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(Instance)'Enum_rep;
   
      p_Target := GetObject (this.m_kind);
      p_RetVal := InvokeMethod2 (Instance, p_Target, p_MethodName, p_Flags, null, p_NetRetVal, False);
   
      SetObject (RetVal.m_Kind, p_RetVal);
      SetObject (RetVal.m_Kind, p_NetRetVal);
      SysFreeString (p_MethodName);
      return RetVal;
   end;
   
   procedure Encoder
   (
      this : in out EncoderParameter.Kind;
      value : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr
   ) is
      function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
      Hr            : HResult := 0;
      p_Parameters  : aliased LPSAFEARRAY := null;
      p_Bounds      : aliased SAFEARRAYBOUND := (1 , 0);
      p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
      p_Value       : aliased VARIANT;
      p_Value_Ptr   : access VARIANT := p_Value'access;
      p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      p_Target      : aliased VARIANT;
      p_MethodName  : BSTR := To_BSTR("Encoder");
      p_RetVal      : aliased VARIANT;
      p_NetRetVal   : aliased IUnknown_Ptr := null;
   begin
      p_Flags := NetFrameworkWin32.BindingFlags'(Public)'Enum_rep;
      p_Flags := p_Flags or 8192;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(Instance)'Enum_rep;
      p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
      ------------------------------------------------------------
      p_Index(1) := 0;
      p_Value := GetObject (value.m_Kind);
      Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
   
      p_Target := GetObject (this.m_kind);
      p_RetVal := InvokeMethod2 (Instance, p_Target, p_MethodName, p_Flags, p_Parameters, p_NetRetVal, False);
   
      Hr := SafeArrayDestroy (p_Parameters);
      SysFreeString (p_MethodName);
   end;
   
   function Type_x
   (
      this : in out EncoderParameter.Kind
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Kind is
      function ConvertEnum is new Ada.Unchecked_Conversion (Interfaces.C.long,NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Kind);
      Hr            : HResult := 0;
      p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      p_Target      : aliased VARIANT;
      p_MethodName  : BSTR := To_BSTR("Type");
      p_RetVal      : aliased VARIANT;
      p_NetRetVal   : aliased IUnknown_Ptr := null;
      RetVal        : NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Kind;
   begin
      p_Flags := NetFrameworkWin32.BindingFlags'(Public)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(GetProperty)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(Instance)'Enum_rep;
   
      p_Target := GetObject (this.m_kind);
      p_RetVal := InvokeMethod2 (Instance, p_Target, p_MethodName, p_Flags, null, p_NetRetVal, False);
   
      SysFreeString (p_MethodName);
      RetVal := ConvertEnum (p_RetVal.field_1.field_1.field_1.lVal);
      return RetVal;
   end;
   
   function ValueType
   (
      this : in out EncoderParameter.Kind
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Kind is
      function ConvertEnum is new Ada.Unchecked_Conversion (Interfaces.C.long,NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Kind);
      Hr            : HResult := 0;
      p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      p_Target      : aliased VARIANT;
      p_MethodName  : BSTR := To_BSTR("ValueType");
      p_RetVal      : aliased VARIANT;
      p_NetRetVal   : aliased IUnknown_Ptr := null;
      RetVal        : NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Kind;
   begin
      p_Flags := NetFrameworkWin32.BindingFlags'(Public)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(GetProperty)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(Instance)'Enum_rep;
   
      p_Target := GetObject (this.m_kind);
      p_RetVal := InvokeMethod2 (Instance, p_Target, p_MethodName, p_Flags, null, p_NetRetVal, False);
   
      SysFreeString (p_MethodName);
      RetVal := ConvertEnum (p_RetVal.field_1.field_1.field_1.lVal);
      return RetVal;
   end;
   
   function NumberOfValues
   (
      this : in out EncoderParameter.Kind
   )
   return NetFrameworkBase.Int32 is
      Hr            : HResult := 0;
      p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      p_Target      : aliased VARIANT;
      p_MethodName  : BSTR := To_BSTR("NumberOfValues");
      p_RetVal      : aliased VARIANT;
      RetVal        : NetFrameworkBase.Int32;
   begin
      p_Flags := NetFrameworkWin32.BindingFlags'(Public)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(GetProperty)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(Instance)'Enum_rep;
   
      p_Target := GetObject (this.m_kind);
      p_RetVal := InvokeMethod (Instance, p_Target, p_MethodName, p_Flags, null, False);
   
      SysFreeString (p_MethodName);
      RetVal := From_Variant (p_RetVal);
      return RetVal;
   end;
   
   procedure Dispose
   (
      this : in out EncoderParameter.Kind
   ) is
      Hr            : HResult := 0;
      p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      p_Target      : aliased VARIANT;
      p_MethodName  : BSTR := To_BSTR("Dispose");
      p_RetVal      : aliased VARIANT;
      p_NetRetVal   : aliased IUnknown_Ptr := null;
   begin
      p_Flags := NetFrameworkWin32.BindingFlags'(Public)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(InvokeMethod)'Enum_rep;
      p_Flags := p_Flags or NetFrameworkWin32.BindingFlags'(Instance)'Enum_rep;
   
      p_Target := GetObject (this.m_kind);
      p_RetVal := InvokeMethod2 (Instance, p_Target, p_MethodName, p_Flags, null, p_NetRetVal, False);
   
      SysFreeString (p_MethodName);
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Byte
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (2 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(value);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Byte;
      undefined : NetFrameworkBase.Boolean
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (3 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(value);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         p_Value := To_Variant(undefined);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Int16
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (2 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(value);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Int64
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (2 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(value);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      numerator : NetFrameworkBase.Int32;
      denominator : NetFrameworkBase.Int32
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (3 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(numerator);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         p_Value := To_Variant(denominator);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      rangebegin : NetFrameworkBase.Int64;
      rangeend : NetFrameworkBase.Int64
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (3 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(rangebegin);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         p_Value := To_Variant(rangeend);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      numerator1 : NetFrameworkBase.Int32;
      demoninator1 : NetFrameworkBase.Int32;
      numerator2 : NetFrameworkBase.Int32;
      demoninator2 : NetFrameworkBase.Int32
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (5 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(numerator1);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         p_Value := To_Variant(demoninator1);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 3;
         p_Value := To_Variant(numerator2);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 4;
         p_Value := To_Variant(demoninator2);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.BSTR
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (2 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(value);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Byte_Array
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (2 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p1_Parameters : aliased LPSAFEARRAY := null;
         p1_Bounds     : aliased SAFEARRAYBOUND := (value'Length , 0);
         p1_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p1_Tmp        : aliased NetFrameworkBase.Byte;
         p1_Tmp_Ptr    : access NetFrameworkBase.Byte := p1_Tmp'access;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Byte_Ptr, LPVOID);
         begin
            p1_Parameters := SafeArrayCreate (VT_UI1'enum_rep, 1, p1_Bounds'access);
            for i in value'range loop
               p1_Index(1) := Interfaces.C.long(i) - 1;
               p1_Tmp := value(i);
               Hr := SafeArrayPutElement (p1_Parameters, p1_Index (p1_Index'first)'access, Convert (p1_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p1_Parameters, VT_UI1);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy (p1_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Byte_Array;
      undefined : NetFrameworkBase.Boolean
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (3 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p1_Parameters : aliased LPSAFEARRAY := null;
         p1_Bounds     : aliased SAFEARRAYBOUND := (value'Length , 0);
         p1_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p1_Tmp        : aliased NetFrameworkBase.Byte;
         p1_Tmp_Ptr    : access NetFrameworkBase.Byte := p1_Tmp'access;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Byte_Ptr, LPVOID);
         begin
            p1_Parameters := SafeArrayCreate (VT_UI1'enum_rep, 1, p1_Bounds'access);
            for i in value'range loop
               p1_Index(1) := Interfaces.C.long(i) - 1;
               p1_Tmp := value(i);
               Hr := SafeArrayPutElement (p1_Parameters, p1_Index (p1_Index'first)'access, Convert (p1_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p1_Parameters, VT_UI1);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         p_Value := To_Variant(undefined);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy (p1_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Int16_Array
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (2 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p1_Parameters : aliased LPSAFEARRAY := null;
         p1_Bounds     : aliased SAFEARRAYBOUND := (value'Length , 0);
         p1_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p1_Tmp        : aliased NetFrameworkBase.Int16;
         p1_Tmp_Ptr    : access NetFrameworkBase.Int16 := p1_Tmp'access;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int16_Ptr, LPVOID);
         begin
            p1_Parameters := SafeArrayCreate (VT_I2'enum_rep, 1, p1_Bounds'access);
            for i in value'range loop
               p1_Index(1) := Interfaces.C.long(i) - 1;
               p1_Tmp := value(i);
               Hr := SafeArrayPutElement (p1_Parameters, p1_Index (p1_Index'first)'access, Convert (p1_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p1_Parameters, VT_I2);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy (p1_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      value : NetFrameworkBase.Int64_Array
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (2 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p1_Parameters : aliased LPSAFEARRAY := null;
         p1_Bounds     : aliased SAFEARRAYBOUND := (value'Length , 0);
         p1_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p1_Tmp        : aliased NetFrameworkBase.Int64;
         p1_Tmp_Ptr    : access NetFrameworkBase.Int64 := p1_Tmp'access;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int64_Ptr, LPVOID);
         begin
            p1_Parameters := SafeArrayCreate (VT_I8'enum_rep, 1, p1_Bounds'access);
            for i in value'range loop
               p1_Index(1) := Interfaces.C.long(i) - 1;
               p1_Tmp := value(i);
               Hr := SafeArrayPutElement (p1_Parameters, p1_Index (p1_Index'first)'access, Convert (p1_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p1_Parameters, VT_I8);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy (p1_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      numerator : NetFrameworkBase.Int32_Array;
      denominator : NetFrameworkBase.Int32_Array
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (3 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p1_Parameters : aliased LPSAFEARRAY := null;
         p1_Bounds     : aliased SAFEARRAYBOUND := (numerator'Length , 0);
         p1_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p1_Tmp        : aliased NetFrameworkBase.Int32;
         p1_Tmp_Ptr    : access NetFrameworkBase.Int32 := p1_Tmp'access;
         p2_Parameters : aliased LPSAFEARRAY := null;
         p2_Bounds     : aliased SAFEARRAYBOUND := (denominator'Length , 0);
         p2_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p2_Tmp        : aliased NetFrameworkBase.Int32;
         p2_Tmp_Ptr    : access NetFrameworkBase.Int32 := p2_Tmp'access;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int32_Ptr, LPVOID);
         begin
            p1_Parameters := SafeArrayCreate (VT_I4'enum_rep, 1, p1_Bounds'access);
            for i in numerator'range loop
               p1_Index(1) := Interfaces.C.long(i) - 1;
               p1_Tmp := numerator(i);
               Hr := SafeArrayPutElement (p1_Parameters, p1_Index (p1_Index'first)'access, Convert (p1_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p1_Parameters, VT_I4);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int32_Ptr, LPVOID);
         begin
            p2_Parameters := SafeArrayCreate (VT_I4'enum_rep, 1, p2_Bounds'access);
            for i in denominator'range loop
               p2_Index(1) := Interfaces.C.long(i) - 1;
               p2_Tmp := denominator(i);
               Hr := SafeArrayPutElement (p2_Parameters, p2_Index (p2_Index'first)'access, Convert (p2_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p2_Parameters, VT_I4);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy (p1_Parameters);
         Hr := SafeArrayDestroy (p2_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      rangebegin : NetFrameworkBase.Int64_Array;
      rangeend : NetFrameworkBase.Int64_Array
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (3 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p1_Parameters : aliased LPSAFEARRAY := null;
         p1_Bounds     : aliased SAFEARRAYBOUND := (rangebegin'Length , 0);
         p1_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p1_Tmp        : aliased NetFrameworkBase.Int64;
         p1_Tmp_Ptr    : access NetFrameworkBase.Int64 := p1_Tmp'access;
         p2_Parameters : aliased LPSAFEARRAY := null;
         p2_Bounds     : aliased SAFEARRAYBOUND := (rangeend'Length , 0);
         p2_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p2_Tmp        : aliased NetFrameworkBase.Int64;
         p2_Tmp_Ptr    : access NetFrameworkBase.Int64 := p2_Tmp'access;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int64_Ptr, LPVOID);
         begin
            p1_Parameters := SafeArrayCreate (VT_I8'enum_rep, 1, p1_Bounds'access);
            for i in rangebegin'range loop
               p1_Index(1) := Interfaces.C.long(i) - 1;
               p1_Tmp := rangebegin(i);
               Hr := SafeArrayPutElement (p1_Parameters, p1_Index (p1_Index'first)'access, Convert (p1_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p1_Parameters, VT_I8);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int64_Ptr, LPVOID);
         begin
            p2_Parameters := SafeArrayCreate (VT_I8'enum_rep, 1, p2_Bounds'access);
            for i in rangeend'range loop
               p2_Index(1) := Interfaces.C.long(i) - 1;
               p2_Tmp := rangeend(i);
               Hr := SafeArrayPutElement (p2_Parameters, p2_Index (p2_Index'first)'access, Convert (p2_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p2_Parameters, VT_I8);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy (p1_Parameters);
         Hr := SafeArrayDestroy (p2_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      numerator1 : NetFrameworkBase.Int32_Array;
      denominator1 : NetFrameworkBase.Int32_Array;
      numerator2 : NetFrameworkBase.Int32_Array;
      denominator2 : NetFrameworkBase.Int32_Array
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (5 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p1_Parameters : aliased LPSAFEARRAY := null;
         p1_Bounds     : aliased SAFEARRAYBOUND := (numerator1'Length , 0);
         p1_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p1_Tmp        : aliased NetFrameworkBase.Int32;
         p1_Tmp_Ptr    : access NetFrameworkBase.Int32 := p1_Tmp'access;
         p2_Parameters : aliased LPSAFEARRAY := null;
         p2_Bounds     : aliased SAFEARRAYBOUND := (denominator1'Length , 0);
         p2_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p2_Tmp        : aliased NetFrameworkBase.Int32;
         p2_Tmp_Ptr    : access NetFrameworkBase.Int32 := p2_Tmp'access;
         p3_Parameters : aliased LPSAFEARRAY := null;
         p3_Bounds     : aliased SAFEARRAYBOUND := (numerator2'Length , 0);
         p3_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p3_Tmp        : aliased NetFrameworkBase.Int32;
         p3_Tmp_Ptr    : access NetFrameworkBase.Int32 := p3_Tmp'access;
         p4_Parameters : aliased LPSAFEARRAY := null;
         p4_Bounds     : aliased SAFEARRAYBOUND := (denominator2'Length , 0);
         p4_Index      : aliased array(1..1) of aliased LONG := (others => 0);
         p4_Tmp        : aliased NetFrameworkBase.Int32;
         p4_Tmp_Ptr    : access NetFrameworkBase.Int32 := p4_Tmp'access;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int32_Ptr, LPVOID);
         begin
            p1_Parameters := SafeArrayCreate (VT_I4'enum_rep, 1, p1_Bounds'access);
            for i in numerator1'range loop
               p1_Index(1) := Interfaces.C.long(i) - 1;
               p1_Tmp := numerator1(i);
               Hr := SafeArrayPutElement (p1_Parameters, p1_Index (p1_Index'first)'access, Convert (p1_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p1_Parameters, VT_I4);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int32_Ptr, LPVOID);
         begin
            p2_Parameters := SafeArrayCreate (VT_I4'enum_rep, 1, p2_Bounds'access);
            for i in denominator1'range loop
               p2_Index(1) := Interfaces.C.long(i) - 1;
               p2_Tmp := denominator1(i);
               Hr := SafeArrayPutElement (p2_Parameters, p2_Index (p2_Index'first)'access, Convert (p2_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p2_Parameters, VT_I4);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 3;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int32_Ptr, LPVOID);
         begin
            p3_Parameters := SafeArrayCreate (VT_I4'enum_rep, 1, p3_Bounds'access);
            for i in numerator2'range loop
               p3_Index(1) := Interfaces.C.long(i) - 1;
               p3_Tmp := numerator2(i);
               Hr := SafeArrayPutElement (p3_Parameters, p3_Index (p3_Index'first)'access, Convert (p3_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p3_Parameters, VT_I4);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 4;
         declare
            use Interfaces.C;
            function Convert is new Ada.Unchecked_Conversion (NetFrameworkBase.Int32_Ptr, LPVOID);
         begin
            p4_Parameters := SafeArrayCreate (VT_I4'enum_rep, 1, p4_Bounds'access);
            for i in denominator2'range loop
               p4_Index(1) := Interfaces.C.long(i) - 1;
               p4_Tmp := denominator2(i);
               Hr := SafeArrayPutElement (p4_Parameters, p4_Index (p4_Index'first)'access, Convert (p4_Tmp_Ptr));
            end loop;
            p_Value := To_Variant (p4_Parameters, VT_I4);
         end;
      
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy (p1_Parameters);
         Hr := SafeArrayDestroy (p2_Parameters);
         Hr := SafeArrayDestroy (p3_Parameters);
         Hr := SafeArrayDestroy (p4_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      NumberOfValues : NetFrameworkBase.Int32;
      Type_x : NetFrameworkBase.Int32;
      Value : NetFrameworkBase.Int32
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (4 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(NumberOfValues);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         p_Value := To_Variant(Type_x);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 3;
         p_Value := To_Variant(Value);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
   function Constructor
   (
      encoder : NetFrameworkBase.System.Drawing.Imaging.Encoder.Kind_Ptr;
      numberValues : NetFrameworkBase.Int32;
      type_x : NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Kind;
      value : NetFrameworkBase.IntPtr
   )
   return NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr is
   begin
      return RetVal : NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind_Ptr := new NetFrameworkBase.System.Drawing.Imaging.EncoderParameter.Kind do
      declare
         function Convert is new Ada.Unchecked_Conversion (LPVARIANT,LPVOID);
         Hr            : HResult := 0;
         p_Parameters  : aliased LPSAFEARRAY := null;
         p_Bounds      : aliased SAFEARRAYBOUND := (4 , 0);
         p_Index       : aliased array(1..1) of aliased LONG := (others => 0);
         p_Value       : aliased VARIANT;
         p_Value_Ptr   : access VARIANT := p_Value'access;
         p_Flags       : aliased NetFrameworkBase.UInt32 := 0;
         p_type_xEnumType : NetFrameworkWin32.IType_Ptr := NetFrameworkBase.System.Drawing.Imaging.EncoderParameterValueType.Instance;
         p_type_xEnum : aliased VARIANT := To_Variant (CreateEnum (p_type_xEnumType, type_x'Enum_rep));
      begin
         p_Parameters := SafeArrayCreate (VT_VARIANT'enum_rep, 1, p_Bounds'access);
         ------------------------------------------------------------
         p_Index(1) := 0;
         p_Value := GetObject (encoder.m_Kind);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 1;
         p_Value := To_Variant(numberValues);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 2;
         p_Value := p_type_xEnum;
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         ------------------------------------------------------------
         p_Index(1) := 3;
         p_Value := To_Variant(value);
         Hr := SafeArrayPutElement (p_Parameters, p_Index(p_Index'first)'access, Convert (p_Value_Ptr));
         NetFrameworkAdaRuntime.CreateInstance (RetVal.m_Kind, This_AssemblyName, This_TypeName, Instance, NetFrameworkWin32.BindingFlags'(CreateInstance)'Enum_rep, p_Parameters);
         Hr := SafeArrayDestroy(p_Parameters);
      end;
      end return;
   end;
   
end;
