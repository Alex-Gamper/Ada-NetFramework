--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Text.Encoding;
limited with NetFrameworkBase.System.ConsoleColor;
limited with NetFrameworkBase.System.Char;
limited with NetFrameworkBase.System.ConsoleCancelEventHandler;
limited with NetFrameworkBase.System.IO.TextReader;
limited with NetFrameworkBase.System.IO.TextWriter;
limited with NetFrameworkBase.System.Decimal;
limited with NetFrameworkBase.System.ConsoleKeyInfo;
limited with NetFrameworkBase.System.IO.Stream;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Console is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function IsInputRedirected
      return NetFrameworkBase.Boolean;
      
      function IsOutputRedirected
      return NetFrameworkBase.Boolean;
      
      function IsErrorRedirected
      return NetFrameworkBase.Boolean;
      
      function In_x
      return NetFrameworkBase.System.IO.TextReader.Kind_Ptr;
      
      function Out_x
      return NetFrameworkBase.System.IO.TextWriter.Kind_Ptr;
      
      function Error
      return NetFrameworkBase.System.IO.TextWriter.Kind_Ptr;
      
      function InputEncoding
      return NetFrameworkBase.System.Text.Encoding.Kind_Ptr;
      
      procedure InputEncoding
      (
         value : NetFrameworkBase.System.Text.Encoding.Kind_Ptr
      )
      ;
      
      function OutputEncoding
      return NetFrameworkBase.System.Text.Encoding.Kind_Ptr;
      
      procedure OutputEncoding
      (
         value : NetFrameworkBase.System.Text.Encoding.Kind_Ptr
      )
      ;
      
      procedure Beep
      ;
      
      procedure Beep
      (
         frequency : NetFrameworkBase.Int32;
         duration : NetFrameworkBase.Int32
      )
      ;
      
      procedure Clear
      ;
      
      function BackgroundColor
      return NetFrameworkBase.System.ConsoleColor.Kind;
      
      procedure BackgroundColor
      (
         value : NetFrameworkBase.System.ConsoleColor.Kind
      )
      ;
      
      function ForegroundColor
      return NetFrameworkBase.System.ConsoleColor.Kind;
      
      procedure ForegroundColor
      (
         value : NetFrameworkBase.System.ConsoleColor.Kind
      )
      ;
      
      procedure ResetColor
      ;
      
      procedure MoveBufferArea
      (
         sourceLeft : NetFrameworkBase.Int32;
         sourceTop : NetFrameworkBase.Int32;
         sourceWidth : NetFrameworkBase.Int32;
         sourceHeight : NetFrameworkBase.Int32;
         targetLeft : NetFrameworkBase.Int32;
         targetTop : NetFrameworkBase.Int32
      )
      ;
      
      procedure MoveBufferArea
      (
         sourceLeft : NetFrameworkBase.Int32;
         sourceTop : NetFrameworkBase.Int32;
         sourceWidth : NetFrameworkBase.Int32;
         sourceHeight : NetFrameworkBase.Int32;
         targetLeft : NetFrameworkBase.Int32;
         targetTop : NetFrameworkBase.Int32;
         sourceChar : NetFrameworkBase.System.Char.Kind_Ptr;
         sourceForeColor : NetFrameworkBase.System.ConsoleColor.Kind;
         sourceBackColor : NetFrameworkBase.System.ConsoleColor.Kind
      )
      ;
      
      function BufferHeight
      return NetFrameworkBase.Int32;
      
      procedure BufferHeight
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      function BufferWidth
      return NetFrameworkBase.Int32;
      
      procedure BufferWidth
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      procedure SetBufferSize
      (
         width : NetFrameworkBase.Int32;
         height : NetFrameworkBase.Int32
      )
      ;
      
      function WindowHeight
      return NetFrameworkBase.Int32;
      
      procedure WindowHeight
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      function WindowWidth
      return NetFrameworkBase.Int32;
      
      procedure WindowWidth
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      procedure SetWindowSize
      (
         width : NetFrameworkBase.Int32;
         height : NetFrameworkBase.Int32
      )
      ;
      
      function LargestWindowWidth
      return NetFrameworkBase.Int32;
      
      function LargestWindowHeight
      return NetFrameworkBase.Int32;
      
      function WindowLeft
      return NetFrameworkBase.Int32;
      
      procedure WindowLeft
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      function WindowTop
      return NetFrameworkBase.Int32;
      
      procedure WindowTop
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      procedure SetWindowPosition
      (
         left : NetFrameworkBase.Int32;
         top : NetFrameworkBase.Int32
      )
      ;
      
      function CursorLeft
      return NetFrameworkBase.Int32;
      
      procedure CursorLeft
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      function CursorTop
      return NetFrameworkBase.Int32;
      
      procedure CursorTop
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      procedure SetCursorPosition
      (
         left : NetFrameworkBase.Int32;
         top : NetFrameworkBase.Int32
      )
      ;
      
      function CursorSize
      return NetFrameworkBase.Int32;
      
      procedure CursorSize
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      function CursorVisible
      return NetFrameworkBase.Boolean;
      
      procedure CursorVisible
      (
         value : NetFrameworkBase.Boolean
      )
      ;
      
      function Title
      return NetFrameworkBase.BSTR;
      
      procedure Title
      (
         value : NetFrameworkBase.BSTR
      )
      ;
      
      function ReadKey
      return NetFrameworkBase.System.ConsoleKeyInfo.Kind_Ptr;
      
      function ReadKey
      (
         intercept : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.ConsoleKeyInfo.Kind_Ptr;
      
      function NumberLock
      return NetFrameworkBase.Boolean;
      
      function CapsLock
      return NetFrameworkBase.Boolean;
      
      function TreatControlCAsInput
      return NetFrameworkBase.Boolean;
      
      procedure TreatControlCAsInput
      (
         value : NetFrameworkBase.Boolean
      )
      ;
      
      procedure add_CancelKeyPress
      (
         value : NetFrameworkBase.System.ConsoleCancelEventHandler.Kind_Ptr
      )
      ;
      
      procedure remove_CancelKeyPress
      (
         value : NetFrameworkBase.System.ConsoleCancelEventHandler.Kind_Ptr
      )
      ;
      
      function OpenStandardError
      return NetFrameworkBase.System.IO.Stream.Kind_Ptr;
      
      function OpenStandardError
      (
         bufferSize : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.IO.Stream.Kind_Ptr;
      
      function OpenStandardInput
      return NetFrameworkBase.System.IO.Stream.Kind_Ptr;
      
      function OpenStandardInput
      (
         bufferSize : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.IO.Stream.Kind_Ptr;
      
      function OpenStandardOutput
      return NetFrameworkBase.System.IO.Stream.Kind_Ptr;
      
      function OpenStandardOutput
      (
         bufferSize : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.IO.Stream.Kind_Ptr;
      
      procedure SetIn
      (
         newIn : NetFrameworkBase.System.IO.TextReader.Kind_Ptr
      )
      ;
      
      procedure SetOut
      (
         newOut : NetFrameworkBase.System.IO.TextWriter.Kind_Ptr
      )
      ;
      
      procedure SetError
      (
         newError : NetFrameworkBase.System.IO.TextWriter.Kind_Ptr
      )
      ;
      
      function Read
      return NetFrameworkBase.Int32;
      
      function ReadLine
      return NetFrameworkBase.BSTR;
      
      procedure WriteLine
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.Boolean
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.System.Char.Kind_Ptr
      )
      ;
      
      procedure WriteLine
      (
         buffer : NetFrameworkBase.System.Char.Kind_Array_Ptr
      )
      ;
      
      procedure WriteLine
      (
         buffer : NetFrameworkBase.System.Char.Kind_Array_Ptr;
         index : NetFrameworkBase.Int32;
         count : NetFrameworkBase.Int32
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.System.Decimal.Kind_Ptr
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.Double
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.Single
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.UInt32
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.Int64
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.UInt64
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure WriteLine
      (
         value : NetFrameworkBase.BSTR
      )
      ;
      
      procedure WriteLine
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure WriteLine
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure WriteLine
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg2 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure WriteLine
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg2 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg3 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure WriteLine
      (
         format : NetFrameworkBase.BSTR;
         arg : NetFrameworkBase.System.Object.Kind_Array
      )
      ;
      
      procedure Write
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure Write
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure Write
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg2 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure Write
      (
         format : NetFrameworkBase.BSTR;
         arg0 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg1 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg2 : NetFrameworkBase.System.Object.Kind_Ptr;
         arg3 : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure Write
      (
         format : NetFrameworkBase.BSTR;
         arg : NetFrameworkBase.System.Object.Kind_Array
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.Boolean
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.System.Char.Kind_Ptr
      )
      ;
      
      procedure Write
      (
         buffer : NetFrameworkBase.System.Char.Kind_Array_Ptr
      )
      ;
      
      procedure Write
      (
         buffer : NetFrameworkBase.System.Char.Kind_Array_Ptr;
         index : NetFrameworkBase.Int32;
         count : NetFrameworkBase.Int32
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.Double
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.System.Decimal.Kind_Ptr
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.Single
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.Int32
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.UInt32
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.Int64
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.UInt64
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      ;
      
      procedure Write
      (
         value : NetFrameworkBase.BSTR
      )
      ;
      
      function KeyAvailable
      return NetFrameworkBase.Boolean;
      
end;
