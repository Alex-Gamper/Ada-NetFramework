--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Security.Cryptography.CngAlgorithm;
limited with NetFrameworkBase.System.Security.Cryptography.CngKeyCreationParameters;
limited with NetFrameworkBase.System.Security.Cryptography.CngProvider;
limited with NetFrameworkBase.System.Security.Cryptography.CngKeyOpenOptions;
limited with NetFrameworkBase.System.Security.Cryptography.CngKeyBlobFormat;
limited with NetFrameworkBase.System.Security.Cryptography.CngPropertyOptions;
limited with NetFrameworkBase.System.Security.Cryptography.CngProperty;
limited with NetFrameworkBase.Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle;
limited with NetFrameworkBase.System.Security.Cryptography.CngKeyHandleOpenOptions;
limited with NetFrameworkBase.Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle;
limited with NetFrameworkBase.System.Security.Cryptography.CngAlgorithmGroup;
limited with NetFrameworkBase.System.Security.Cryptography.CngExportPolicies;
limited with NetFrameworkBase.System.Security.Cryptography.CngKeyUsages;
limited with NetFrameworkBase.System.Security.Cryptography.CngUIPolicy;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Security.Cryptography.CngKey is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Handle
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.Kind_Ptr;
      
      function ProviderHandle
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.Kind_Ptr;
      
      function Create
      (
         algorithm : NetFrameworkBase.System.Security.Cryptography.CngAlgorithm.Kind_Ptr
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      function Create
      (
         algorithm : NetFrameworkBase.System.Security.Cryptography.CngAlgorithm.Kind_Ptr; 
         keyName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      function Create
      (
         algorithm : NetFrameworkBase.System.Security.Cryptography.CngAlgorithm.Kind_Ptr; 
         keyName : NetFrameworkBase.BSTR; 
         creationParameters : NetFrameworkBase.System.Security.Cryptography.CngKeyCreationParameters.Kind_Ptr
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      procedure Delete
      (
         this : in out CngKey.Kind
      );
      
      procedure Dispose
      (
         this : in out CngKey.Kind
      );
      
      function Exists
      (
         keyName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function Exists
      (
         keyName : NetFrameworkBase.BSTR; 
         provider : NetFrameworkBase.System.Security.Cryptography.CngProvider.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Exists
      (
         keyName : NetFrameworkBase.BSTR; 
         provider : NetFrameworkBase.System.Security.Cryptography.CngProvider.Kind_Ptr; 
         options : NetFrameworkBase.System.Security.Cryptography.CngKeyOpenOptions.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Import
      (
         keyBlob : NetFrameworkBase.Byte_Array; 
         format : NetFrameworkBase.System.Security.Cryptography.CngKeyBlobFormat.Kind_Ptr
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      function Import
      (
         keyBlob : NetFrameworkBase.Byte_Array; 
         format : NetFrameworkBase.System.Security.Cryptography.CngKeyBlobFormat.Kind_Ptr; 
         provider : NetFrameworkBase.System.Security.Cryptography.CngProvider.Kind_Ptr
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      function Export
      (
         this : in out CngKey.Kind;
         format : NetFrameworkBase.System.Security.Cryptography.CngKeyBlobFormat.Kind_Ptr
      )
      return NetFrameworkBase.Byte_Array;
      
      function GetProperty
      (
         this : in out CngKey.Kind;
         name : NetFrameworkBase.BSTR; 
         options : NetFrameworkBase.System.Security.Cryptography.CngPropertyOptions.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngProperty.Kind_Ptr;
      
      function HasProperty
      (
         this : in out CngKey.Kind;
         name : NetFrameworkBase.BSTR; 
         options : NetFrameworkBase.System.Security.Cryptography.CngPropertyOptions.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Open
      (
         keyName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      function Open
      (
         keyName : NetFrameworkBase.BSTR; 
         provider : NetFrameworkBase.System.Security.Cryptography.CngProvider.Kind_Ptr
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      function Open
      (
         keyName : NetFrameworkBase.BSTR; 
         provider : NetFrameworkBase.System.Security.Cryptography.CngProvider.Kind_Ptr; 
         openOptions : NetFrameworkBase.System.Security.Cryptography.CngKeyOpenOptions.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
      procedure SetProperty
      (
         this : in out CngKey.Kind;
         property : NetFrameworkBase.System.Security.Cryptography.CngProperty.Kind_Ptr
      );
      
      function AlgorithmGroup
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngAlgorithmGroup.Kind_Ptr;
      
      function Algorithm
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngAlgorithm.Kind_Ptr;
      
      function ExportPolicy
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngExportPolicies.Kind;
      
      function IsEphemeral
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsMachineKey
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function KeyName
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function KeySize
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.Int32;
      
      function KeyUsage
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKeyUsages.Kind;
      
      function ParentWindowHandle
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      procedure ParentWindowHandle
      (
         this : in out CngKey.Kind;
         value : NetFrameworkBase.IntPtr
      );
      
      function Provider
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngProvider.Kind_Ptr;
      
      function UniqueName
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function UIPolicy
      (
         this : in out CngKey.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngUIPolicy.Kind_Ptr;
      
      function Open
      (
         keyHandle : NetFrameworkBase.Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.Kind_Ptr; 
         keyHandleOpenOptions : NetFrameworkBase.System.Security.Cryptography.CngKeyHandleOpenOptions.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.CngKey.Kind_Ptr;
      
end;
