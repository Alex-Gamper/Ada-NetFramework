--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.MarshalByRefObject;
limited with NetFrameworkBase.System.Drawing.Drawing2D.FillMode;
limited with NetFrameworkBase.System.Drawing.Rectangle;
limited with NetFrameworkBase.System.Drawing.PointF;
limited with NetFrameworkBase.System.Drawing.Graphics;
limited with NetFrameworkBase.System.Drawing.Point;
limited with NetFrameworkBase.System.Drawing.Pen;
limited with NetFrameworkBase.System.Drawing.RectangleF;
limited with NetFrameworkBase.System.Drawing.FontFamily;
limited with NetFrameworkBase.System.Drawing.StringFormat;
limited with NetFrameworkBase.System.Drawing.Drawing2D.Matrix;
limited with NetFrameworkBase.System.Drawing.Drawing2D.WarpMode;
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Drawing.Drawing2D.PathData;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath is
   
   type Kind is new NetFrameworkBase.System.MarshalByRefObject.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      procedure FillMode
      (
         this : in out GraphicsPath.Kind;
         value : NetFrameworkBase.System.Drawing.Drawing2D.FillMode.Kind
      );
      
      procedure AddRectangle
      (
         this : in out GraphicsPath.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      );
      
      function PointCount
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Clone
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure Dispose
      (
         this : in out GraphicsPath.Kind
      );
      
      procedure Reset
      (
         this : in out GraphicsPath.Kind
      );
      
      function FillMode
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.FillMode.Kind;
      
      function PathData
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.PathData.Kind_Ptr;
      
      procedure StartFigure
      (
         this : in out GraphicsPath.Kind
      );
      
      procedure CloseFigure
      (
         this : in out GraphicsPath.Kind
      );
      
      procedure CloseAllFigures
      (
         this : in out GraphicsPath.Kind
      );
      
      procedure SetMarkers
      (
         this : in out GraphicsPath.Kind
      );
      
      procedure ClearMarkers
      (
         this : in out GraphicsPath.Kind
      );
      
      procedure Reverse_x
      (
         this : in out GraphicsPath.Kind
      );
      
      function GetLastPoint
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.System.Drawing.PointF.Kind_Ptr;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         point : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         pt : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         point : NetFrameworkBase.System.Drawing.Point.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsVisible
      (
         this : in out GraphicsPath.Kind;
         pt : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         point : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         pt : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         point : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function IsOutlineVisible
      (
         this : in out GraphicsPath.Kind;
         pt : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr; 
         graphics : NetFrameworkBase.System.Drawing.Graphics.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      procedure AddLine
      (
         this : in out GraphicsPath.Kind;
         pt1 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         pt2 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr
      );
      
      procedure AddLine
      (
         this : in out GraphicsPath.Kind;
         x1 : NetFrameworkBase.Single; 
         y1 : NetFrameworkBase.Single; 
         x2 : NetFrameworkBase.Single; 
         y2 : NetFrameworkBase.Single
      );
      
      procedure AddLines
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr
      );
      
      procedure AddLine
      (
         this : in out GraphicsPath.Kind;
         pt1 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         pt2 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr
      );
      
      procedure AddLine
      (
         this : in out GraphicsPath.Kind;
         x1 : NetFrameworkBase.Int32; 
         y1 : NetFrameworkBase.Int32; 
         x2 : NetFrameworkBase.Int32; 
         y2 : NetFrameworkBase.Int32
      );
      
      procedure AddLines
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr
      );
      
      procedure AddArc
      (
         this : in out GraphicsPath.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr; 
         startAngle : NetFrameworkBase.Single; 
         sweepAngle : NetFrameworkBase.Single
      );
      
      procedure AddArc
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         width : NetFrameworkBase.Single; 
         height : NetFrameworkBase.Single; 
         startAngle : NetFrameworkBase.Single; 
         sweepAngle : NetFrameworkBase.Single
      );
      
      procedure AddArc
      (
         this : in out GraphicsPath.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr; 
         startAngle : NetFrameworkBase.Single; 
         sweepAngle : NetFrameworkBase.Single
      );
      
      procedure AddArc
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         width : NetFrameworkBase.Int32; 
         height : NetFrameworkBase.Int32; 
         startAngle : NetFrameworkBase.Single; 
         sweepAngle : NetFrameworkBase.Single
      );
      
      procedure AddBezier
      (
         this : in out GraphicsPath.Kind;
         pt1 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         pt2 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         pt3 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         pt4 : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr
      );
      
      procedure AddBezier
      (
         this : in out GraphicsPath.Kind;
         x1 : NetFrameworkBase.Single; 
         y1 : NetFrameworkBase.Single; 
         x2 : NetFrameworkBase.Single; 
         y2 : NetFrameworkBase.Single; 
         x3 : NetFrameworkBase.Single; 
         y3 : NetFrameworkBase.Single; 
         x4 : NetFrameworkBase.Single; 
         y4 : NetFrameworkBase.Single
      );
      
      procedure AddBeziers
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr
      );
      
      procedure AddBezier
      (
         this : in out GraphicsPath.Kind;
         pt1 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         pt2 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         pt3 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         pt4 : NetFrameworkBase.System.Drawing.Point.Kind_Ptr
      );
      
      procedure AddBezier
      (
         this : in out GraphicsPath.Kind;
         x1 : NetFrameworkBase.Int32; 
         y1 : NetFrameworkBase.Int32; 
         x2 : NetFrameworkBase.Int32; 
         y2 : NetFrameworkBase.Int32; 
         x3 : NetFrameworkBase.Int32; 
         y3 : NetFrameworkBase.Int32; 
         x4 : NetFrameworkBase.Int32; 
         y4 : NetFrameworkBase.Int32
      );
      
      procedure AddBeziers
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr
      );
      
      procedure AddCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr
      );
      
      procedure AddCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr; 
         tension : NetFrameworkBase.Single
      );
      
      procedure AddCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr; 
         offset : NetFrameworkBase.Int32; 
         numberOfSegments : NetFrameworkBase.Int32; 
         tension : NetFrameworkBase.Single
      );
      
      procedure AddCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr
      );
      
      procedure AddCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr; 
         tension : NetFrameworkBase.Single
      );
      
      procedure AddCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr; 
         offset : NetFrameworkBase.Int32; 
         numberOfSegments : NetFrameworkBase.Int32; 
         tension : NetFrameworkBase.Single
      );
      
      procedure AddClosedCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr
      );
      
      procedure AddClosedCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr; 
         tension : NetFrameworkBase.Single
      );
      
      procedure AddClosedCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr
      );
      
      procedure AddClosedCurve
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr; 
         tension : NetFrameworkBase.Single
      );
      
      procedure AddRectangle
      (
         this : in out GraphicsPath.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure AddRectangles
      (
         this : in out GraphicsPath.Kind;
         rects : NetFrameworkBase.System.Drawing.RectangleF.Kind_Array_Ptr
      );
      
      procedure AddRectangles
      (
         this : in out GraphicsPath.Kind;
         rects : NetFrameworkBase.System.Drawing.Rectangle.Kind_Array_Ptr
      );
      
      procedure AddEllipse
      (
         this : in out GraphicsPath.Kind;
         rect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure AddEllipse
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         width : NetFrameworkBase.Single; 
         height : NetFrameworkBase.Single
      );
      
      procedure AddEllipse
      (
         this : in out GraphicsPath.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr
      );
      
      procedure AddEllipse
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         width : NetFrameworkBase.Int32; 
         height : NetFrameworkBase.Int32
      );
      
      procedure AddPie
      (
         this : in out GraphicsPath.Kind;
         rect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr; 
         startAngle : NetFrameworkBase.Single; 
         sweepAngle : NetFrameworkBase.Single
      );
      
      procedure AddPie
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Single; 
         y : NetFrameworkBase.Single; 
         width : NetFrameworkBase.Single; 
         height : NetFrameworkBase.Single; 
         startAngle : NetFrameworkBase.Single; 
         sweepAngle : NetFrameworkBase.Single
      );
      
      procedure AddPie
      (
         this : in out GraphicsPath.Kind;
         x : NetFrameworkBase.Int32; 
         y : NetFrameworkBase.Int32; 
         width : NetFrameworkBase.Int32; 
         height : NetFrameworkBase.Int32; 
         startAngle : NetFrameworkBase.Single; 
         sweepAngle : NetFrameworkBase.Single
      );
      
      procedure AddPolygon
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr
      );
      
      procedure AddPolygon
      (
         this : in out GraphicsPath.Kind;
         points : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr
      );
      
      procedure AddPath
      (
         this : in out GraphicsPath.Kind;
         addingPath : NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr; 
         connect : NetFrameworkBase.Boolean
      );
      
      procedure AddString
      (
         this : in out GraphicsPath.Kind;
         s : NetFrameworkBase.BSTR; 
         family : NetFrameworkBase.System.Drawing.FontFamily.Kind_Ptr; 
         style : NetFrameworkBase.Int32; 
         emSize : NetFrameworkBase.Single; 
         origin : NetFrameworkBase.System.Drawing.PointF.Kind_Ptr; 
         format : NetFrameworkBase.System.Drawing.StringFormat.Kind_Ptr
      );
      
      procedure AddString
      (
         this : in out GraphicsPath.Kind;
         s : NetFrameworkBase.BSTR; 
         family : NetFrameworkBase.System.Drawing.FontFamily.Kind_Ptr; 
         style : NetFrameworkBase.Int32; 
         emSize : NetFrameworkBase.Single; 
         origin : NetFrameworkBase.System.Drawing.Point.Kind_Ptr; 
         format : NetFrameworkBase.System.Drawing.StringFormat.Kind_Ptr
      );
      
      procedure AddString
      (
         this : in out GraphicsPath.Kind;
         s : NetFrameworkBase.BSTR; 
         family : NetFrameworkBase.System.Drawing.FontFamily.Kind_Ptr; 
         style : NetFrameworkBase.Int32; 
         emSize : NetFrameworkBase.Single; 
         layoutRect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr; 
         format : NetFrameworkBase.System.Drawing.StringFormat.Kind_Ptr
      );
      
      procedure AddString
      (
         this : in out GraphicsPath.Kind;
         s : NetFrameworkBase.BSTR; 
         family : NetFrameworkBase.System.Drawing.FontFamily.Kind_Ptr; 
         style : NetFrameworkBase.Int32; 
         emSize : NetFrameworkBase.Single; 
         layoutRect : NetFrameworkBase.System.Drawing.Rectangle.Kind_Ptr; 
         format : NetFrameworkBase.System.Drawing.StringFormat.Kind_Ptr
      );
      
      procedure Transform
      (
         this : in out GraphicsPath.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      );
      
      function GetBounds
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
      
      function GetBounds
      (
         this : in out GraphicsPath.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
      
      function GetBounds
      (
         this : in out GraphicsPath.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr; 
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr
      )
      return NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr;
      
      procedure Flatten
      (
         this : in out GraphicsPath.Kind
      );
      
      procedure Flatten
      (
         this : in out GraphicsPath.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      );
      
      procedure Flatten
      (
         this : in out GraphicsPath.Kind;
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr; 
         flatness : NetFrameworkBase.Single
      );
      
      procedure Widen
      (
         this : in out GraphicsPath.Kind;
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr
      );
      
      procedure Widen
      (
         this : in out GraphicsPath.Kind;
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr; 
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      );
      
      procedure Widen
      (
         this : in out GraphicsPath.Kind;
         pen : NetFrameworkBase.System.Drawing.Pen.Kind_Ptr; 
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr; 
         flatness : NetFrameworkBase.Single
      );
      
      procedure Warp
      (
         this : in out GraphicsPath.Kind;
         destPoints : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr; 
         srcRect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr
      );
      
      procedure Warp
      (
         this : in out GraphicsPath.Kind;
         destPoints : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr; 
         srcRect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr; 
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr
      );
      
      procedure Warp
      (
         this : in out GraphicsPath.Kind;
         destPoints : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr; 
         srcRect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr; 
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr; 
         warpMode : NetFrameworkBase.System.Drawing.Drawing2D.WarpMode.Kind
      );
      
      procedure Warp
      (
         this : in out GraphicsPath.Kind;
         destPoints : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr; 
         srcRect : NetFrameworkBase.System.Drawing.RectangleF.Kind_Ptr; 
         matrix : NetFrameworkBase.System.Drawing.Drawing2D.Matrix.Kind_Ptr; 
         warpMode : NetFrameworkBase.System.Drawing.Drawing2D.WarpMode.Kind; 
         flatness : NetFrameworkBase.Single
      );
      
      function PathTypes
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.Byte_Array;
      
      function PathPoints
      (
         this : in out GraphicsPath.Kind
      )
      return NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr;
      
      function Constructor return NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr;
      
      function Constructor
      (
         fillMode : NetFrameworkBase.System.Drawing.Drawing2D.FillMode.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr;
      
      function Constructor
      (
         pts : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr;
         types : NetFrameworkBase.Byte_Array
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr;
      
      function Constructor
      (
         pts : NetFrameworkBase.System.Drawing.PointF.Kind_Array_Ptr;
         types : NetFrameworkBase.Byte_Array;
         fillMode : NetFrameworkBase.System.Drawing.Drawing2D.FillMode.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr;
      
      function Constructor
      (
         pts : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr;
         types : NetFrameworkBase.Byte_Array
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr;
      
      function Constructor
      (
         pts : NetFrameworkBase.System.Drawing.Point.Kind_Array_Ptr;
         types : NetFrameworkBase.Byte_Array;
         fillMode : NetFrameworkBase.System.Drawing.Drawing2D.FillMode.Kind
      )
      return NetFrameworkBase.System.Drawing.Drawing2D.GraphicsPath.Kind_Ptr;
      
end;
