--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.ComponentModel.MarshalByValueComponent;
limited with NetFrameworkBase.System.Data.DataSetDateTime;
limited with NetFrameworkBase.System.Type_x;
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Data.MappingType;
limited with NetFrameworkBase.System.Data.PropertyCollection;
limited with NetFrameworkBase.System.Data.DataTable;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Data.DataColumn is
   
   type Kind is new NetFrameworkBase.System.ComponentModel.MarshalByValueComponent.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function AllowDBNull
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function AutoIncrement
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function AutoIncrementSeed
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Int64;
      
      function AutoIncrementStep
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Int64;
      
      function Caption
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure Caption
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function ColumnName
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Prefix
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function DataType
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.System.Type_x.Kind_Ptr;
      
      function DateTimeMode
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.System.Data.DataSetDateTime.Kind;
      
      procedure DateTimeMode
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.System.Data.DataSetDateTime.Kind
      );
      
      function Expression
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ExtendedProperties
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.System.Data.PropertyCollection.Kind_Ptr;
      
      function MaxLength
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Namespace
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Ordinal
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure SetOrdinal
      (
         this : in out DataColumn.Kind;
         ordinal : NetFrameworkBase.Int32
      );
      
      function ReadOnly
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Table
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.System.Data.DataTable.Kind_Ptr;
      
      function Unique
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function ColumnMapping
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.System.Data.MappingType.Kind;
      
      procedure AllowDBNull
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      procedure AutoIncrement
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      procedure AutoIncrementSeed
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.Int64
      );
      
      procedure AutoIncrementStep
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.Int64
      );
      
      procedure ColumnName
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      procedure Prefix
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      procedure DataType
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.System.Type_x.Kind_Ptr
      );
      
      function DefaultValue
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure DefaultValue
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      );
      
      procedure Expression
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      procedure MaxLength
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.Int32
      );
      
      procedure Namespace
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      procedure ReadOnly
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      procedure Unique
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      procedure ColumnMapping
      (
         this : in out DataColumn.Kind;
         value : NetFrameworkBase.System.Data.MappingType.Kind
      );
      
      function ToString
      (
         this : in out DataColumn.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Constructor return NetFrameworkBase.System.Data.DataColumn.Kind_Ptr;
      
      function Constructor
      (
         columnName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Data.DataColumn.Kind_Ptr;
      
      function Constructor
      (
         columnName : NetFrameworkBase.BSTR;
         dataType : NetFrameworkBase.System.Type_x.Kind_Ptr
      )
      return NetFrameworkBase.System.Data.DataColumn.Kind_Ptr;
      
      function Constructor
      (
         columnName : NetFrameworkBase.BSTR;
         dataType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         expr : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Data.DataColumn.Kind_Ptr;
      
      function Constructor
      (
         columnName : NetFrameworkBase.BSTR;
         dataType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         expr : NetFrameworkBase.BSTR;
         type_x : NetFrameworkBase.System.Data.MappingType.Kind
      )
      return NetFrameworkBase.System.Data.DataColumn.Kind_Ptr;
      
end;
