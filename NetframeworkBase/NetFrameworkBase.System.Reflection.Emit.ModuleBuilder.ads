--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Reflection.Module;
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Reflection.PortableExecutableKinds;
limited with NetFrameworkBase.System.Reflection.ImageFileMachine;
limited with NetFrameworkBase.System.Reflection.BindingFlags;
limited with NetFrameworkBase.System.Reflection.TypeAttributes;
limited with NetFrameworkBase.System.Reflection.Emit.PackingSize;
limited with NetFrameworkBase.System.Reflection.ResourceAttributes;
limited with NetFrameworkBase.System.IO.Stream;
limited with NetFrameworkBase.System.Reflection.MethodAttributes;
limited with NetFrameworkBase.System.Reflection.CallingConventions;
limited with NetFrameworkBase.System.Runtime.InteropServices.CallingConvention;
limited with NetFrameworkBase.System.Runtime.InteropServices.CharSet;
limited with NetFrameworkBase.System.Reflection.FieldAttributes;
limited with NetFrameworkBase.System.Reflection.MethodInfo;
limited with NetFrameworkBase.System.Reflection.ConstructorInfo;
limited with NetFrameworkBase.System.Reflection.FieldInfo;
limited with NetFrameworkBase.System.Reflection.Emit.SignatureHelper;
limited with NetFrameworkBase.System.Reflection.Emit.CustomAttributeBuilder;
limited with NetFrameworkBase.System.Guid;
limited with NetFrameworkBase.System.Reflection.MethodBase;
limited with NetFrameworkBase.System.Reflection.MemberInfo;
limited with NetFrameworkBase.System.Reflection.Assembly;
limited with NetFrameworkBase.System.Security.Cryptography.X509Certificates.X509Certificate;
limited with NetFrameworkBase.System.Reflection.Emit.TypeBuilder;
limited with NetFrameworkBase.System.Reflection.Emit.EnumBuilder;
limited with NetFrameworkBase.System.Resources.IResourceWriter;
limited with NetFrameworkBase.System.Reflection.Emit.MethodBuilder;
limited with NetFrameworkBase.System.Reflection.Emit.FieldBuilder;
limited with NetFrameworkBase.System.Reflection.Emit.TypeToken;
limited with NetFrameworkBase.System.Reflection.Emit.MethodToken;
limited with NetFrameworkBase.System.Reflection.Emit.FieldToken;
limited with NetFrameworkBase.System.Reflection.Emit.StringToken;
limited with NetFrameworkBase.System.Reflection.Emit.SignatureToken;
limited with NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolWriter;
limited with NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Reflection.Emit.ModuleBuilder is
   
   type Kind is new NetFrameworkBase.System.Reflection.Module.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Equals
      (
         this : in out ModuleBuilder.Kind;
         obj : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetHashCode
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.Int32;
      
      function GetCustomAttributes
      (
         this : in out ModuleBuilder.Kind;
         inherit : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Object.Kind_Array;
      
      function GetCustomAttributes
      (
         this : in out ModuleBuilder.Kind;
         attributeType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         inherit : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Object.Kind_Array;
      
      function IsDefined
      (
         this : in out ModuleBuilder.Kind;
         attributeType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         inherit : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.Boolean;
      
      function GetTypes
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.System.Type_x.Kind_Array;
      
      function GetType
      (
         this : in out ModuleBuilder.Kind;
         className : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Type_x.Kind_Ptr;
      
      function GetType
      (
         this : in out ModuleBuilder.Kind;
         className : NetFrameworkBase.BSTR; 
         ignoreCase : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Type_x.Kind_Ptr;
      
      function GetType
      (
         this : in out ModuleBuilder.Kind;
         className : NetFrameworkBase.BSTR; 
         throwOnError : NetFrameworkBase.Boolean; 
         ignoreCase : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Type_x.Kind_Ptr;
      
      function FullyQualifiedName
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ResolveSignature
      (
         this : in out ModuleBuilder.Kind;
         metadataToken : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Byte_Array;
      
      function ResolveMethod
      (
         this : in out ModuleBuilder.Kind;
         metadataToken : NetFrameworkBase.Int32; 
         genericTypeArguments : NetFrameworkBase.System.Type_x.Kind_Array; 
         genericMethodArguments : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.MethodBase.Kind_Ptr;
      
      function ResolveField
      (
         this : in out ModuleBuilder.Kind;
         metadataToken : NetFrameworkBase.Int32; 
         genericTypeArguments : NetFrameworkBase.System.Type_x.Kind_Array; 
         genericMethodArguments : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.FieldInfo.Kind_Ptr;
      
      function ResolveType
      (
         this : in out ModuleBuilder.Kind;
         metadataToken : NetFrameworkBase.Int32; 
         genericTypeArguments : NetFrameworkBase.System.Type_x.Kind_Array; 
         genericMethodArguments : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Type_x.Kind_Ptr;
      
      function ResolveMember
      (
         this : in out ModuleBuilder.Kind;
         metadataToken : NetFrameworkBase.Int32; 
         genericTypeArguments : NetFrameworkBase.System.Type_x.Kind_Array; 
         genericMethodArguments : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.MemberInfo.Kind_Ptr;
      
      function ResolveString
      (
         this : in out ModuleBuilder.Kind;
         metadataToken : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.BSTR;
      
      procedure GetPEKind
      (
         this : in out ModuleBuilder.Kind;
         peKind : out NetFrameworkBase.System.Reflection.PortableExecutableKinds.Kind; 
         machine : out NetFrameworkBase.System.Reflection.ImageFileMachine.Kind
      );
      
      function MDStreamVersion
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.Int32;
      
      function ModuleVersionId
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.System.Guid.Kind_Ptr;
      
      function MetadataToken
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.Int32;
      
      function IsResource
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function GetFields
      (
         this : in out ModuleBuilder.Kind;
         bindingFlags : NetFrameworkBase.System.Reflection.BindingFlags.Kind
      )
      return NetFrameworkBase.System.Reflection.FieldInfo.Kind_Array;
      
      function GetField
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         bindingAttr : NetFrameworkBase.System.Reflection.BindingFlags.Kind
      )
      return NetFrameworkBase.System.Reflection.FieldInfo.Kind_Ptr;
      
      function GetMethods
      (
         this : in out ModuleBuilder.Kind;
         bindingFlags : NetFrameworkBase.System.Reflection.BindingFlags.Kind
      )
      return NetFrameworkBase.System.Reflection.MethodInfo.Kind_Array;
      
      function ScopeName
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Name
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Assembly
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.System.Reflection.Assembly.Kind_Ptr;
      
      function GetSignerCertificate
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.System.Security.Cryptography.X509Certificates.X509Certificate.Kind_Ptr;
      
      function DefineType
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr;
      
      function DefineType
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attr : NetFrameworkBase.System.Reflection.TypeAttributes.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr;
      
      function DefineType
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attr : NetFrameworkBase.System.Reflection.TypeAttributes.Kind; 
         parent : NetFrameworkBase.System.Type_x.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr;
      
      function DefineType
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attr : NetFrameworkBase.System.Reflection.TypeAttributes.Kind; 
         parent : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         typesize : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr;
      
      function DefineType
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attr : NetFrameworkBase.System.Reflection.TypeAttributes.Kind; 
         parent : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         packingSize : NetFrameworkBase.System.Reflection.Emit.PackingSize.Kind; 
         typesize : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr;
      
      function DefineType
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attr : NetFrameworkBase.System.Reflection.TypeAttributes.Kind; 
         parent : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         interfaces_x : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr;
      
      function DefineType
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attr : NetFrameworkBase.System.Reflection.TypeAttributes.Kind; 
         parent : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         packsize : NetFrameworkBase.System.Reflection.Emit.PackingSize.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeBuilder.Kind_Ptr;
      
      function DefineEnum
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         visibility : NetFrameworkBase.System.Reflection.TypeAttributes.Kind; 
         underlyingType : NetFrameworkBase.System.Type_x.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.EnumBuilder.Kind_Ptr;
      
      function DefineResource
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         description : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Resources.IResourceWriter.Kind_Ptr;
      
      function DefineResource
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         description : NetFrameworkBase.BSTR; 
         attribute : NetFrameworkBase.System.Reflection.ResourceAttributes.Kind
      )
      return NetFrameworkBase.System.Resources.IResourceWriter.Kind_Ptr;
      
      procedure DefineManifestResource
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         stream : NetFrameworkBase.System.IO.Stream.Kind_Ptr; 
         attribute : NetFrameworkBase.System.Reflection.ResourceAttributes.Kind
      );
      
      procedure DefineUnmanagedResource
      (
         this : in out ModuleBuilder.Kind;
         resource : NetFrameworkBase.Byte_Array
      );
      
      procedure DefineUnmanagedResource
      (
         this : in out ModuleBuilder.Kind;
         resourceFileName : NetFrameworkBase.BSTR
      );
      
      function DefineGlobalMethod
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attributes : NetFrameworkBase.System.Reflection.MethodAttributes.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodBuilder.Kind_Ptr;
      
      function DefineGlobalMethod
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attributes : NetFrameworkBase.System.Reflection.MethodAttributes.Kind; 
         callingConvention : NetFrameworkBase.System.Reflection.CallingConventions.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodBuilder.Kind_Ptr;
      
      function DefineGlobalMethod
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         attributes : NetFrameworkBase.System.Reflection.MethodAttributes.Kind; 
         callingConvention : NetFrameworkBase.System.Reflection.CallingConventions.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         requiredReturnTypeCustomModifiers : NetFrameworkBase.System.Type_x.Kind_Array; 
         optionalReturnTypeCustomModifiers : NetFrameworkBase.System.Type_x.Kind_Array; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array; 
         requiredParameterTypeCustomModifiers : NetFrameworkBase.System.Type_x.Kind_Array; 
         optionalParameterTypeCustomModifiers : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodBuilder.Kind_Ptr;
      
      function DefinePInvokeMethod
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         dllName : NetFrameworkBase.BSTR; 
         attributes : NetFrameworkBase.System.Reflection.MethodAttributes.Kind; 
         callingConvention : NetFrameworkBase.System.Reflection.CallingConventions.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array; 
         nativeCallConv : NetFrameworkBase.System.Runtime.InteropServices.CallingConvention.Kind; 
         nativeCharSet : NetFrameworkBase.System.Runtime.InteropServices.CharSet.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodBuilder.Kind_Ptr;
      
      function DefinePInvokeMethod
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         dllName : NetFrameworkBase.BSTR; 
         entryName : NetFrameworkBase.BSTR; 
         attributes : NetFrameworkBase.System.Reflection.MethodAttributes.Kind; 
         callingConvention : NetFrameworkBase.System.Reflection.CallingConventions.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array; 
         nativeCallConv : NetFrameworkBase.System.Runtime.InteropServices.CallingConvention.Kind; 
         nativeCharSet : NetFrameworkBase.System.Runtime.InteropServices.CharSet.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodBuilder.Kind_Ptr;
      
      procedure CreateGlobalFunctions
      (
         this : in out ModuleBuilder.Kind
      );
      
      function DefineInitializedData
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         data : NetFrameworkBase.Byte_Array; 
         attributes : NetFrameworkBase.System.Reflection.FieldAttributes.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.FieldBuilder.Kind_Ptr;
      
      function DefineUninitializedData
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         size : NetFrameworkBase.Int32; 
         attributes : NetFrameworkBase.System.Reflection.FieldAttributes.Kind
      )
      return NetFrameworkBase.System.Reflection.Emit.FieldBuilder.Kind_Ptr;
      
      function GetTypeToken
      (
         this : in out ModuleBuilder.Kind;
         type_x : NetFrameworkBase.System.Type_x.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeToken.Kind_Ptr;
      
      function GetTypeToken
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Reflection.Emit.TypeToken.Kind_Ptr;
      
      function GetMethodToken
      (
         this : in out ModuleBuilder.Kind;
         method : NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodToken.Kind_Ptr;
      
      function GetArrayMethodToken
      (
         this : in out ModuleBuilder.Kind;
         arrayClass : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         methodName : NetFrameworkBase.BSTR; 
         callingConvention : NetFrameworkBase.System.Reflection.CallingConventions.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodToken.Kind_Ptr;
      
      function GetArrayMethod
      (
         this : in out ModuleBuilder.Kind;
         arrayClass : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         methodName : NetFrameworkBase.BSTR; 
         callingConvention : NetFrameworkBase.System.Reflection.CallingConventions.Kind; 
         returnType : NetFrameworkBase.System.Type_x.Kind_Ptr; 
         parameterTypes : NetFrameworkBase.System.Type_x.Kind_Array
      )
      return NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr;
      
      function GetConstructorToken
      (
         this : in out ModuleBuilder.Kind;
         con : NetFrameworkBase.System.Reflection.ConstructorInfo.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.MethodToken.Kind_Ptr;
      
      function GetFieldToken
      (
         this : in out ModuleBuilder.Kind;
         field : NetFrameworkBase.System.Reflection.FieldInfo.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.FieldToken.Kind_Ptr;
      
      function GetStringConstant
      (
         this : in out ModuleBuilder.Kind;
         str : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Reflection.Emit.StringToken.Kind_Ptr;
      
      function GetSignatureToken
      (
         this : in out ModuleBuilder.Kind;
         sigHelper : NetFrameworkBase.System.Reflection.Emit.SignatureHelper.Kind_Ptr
      )
      return NetFrameworkBase.System.Reflection.Emit.SignatureToken.Kind_Ptr;
      
      function GetSignatureToken
      (
         this : in out ModuleBuilder.Kind;
         sigBytes : NetFrameworkBase.Byte_Array; 
         sigLength : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Reflection.Emit.SignatureToken.Kind_Ptr;
      
      procedure SetCustomAttribute
      (
         this : in out ModuleBuilder.Kind;
         con : NetFrameworkBase.System.Reflection.ConstructorInfo.Kind_Ptr; 
         binaryAttribute : NetFrameworkBase.Byte_Array
      );
      
      procedure SetCustomAttribute
      (
         this : in out ModuleBuilder.Kind;
         customBuilder : NetFrameworkBase.System.Reflection.Emit.CustomAttributeBuilder.Kind_Ptr
      );
      
      function GetSymWriter
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolWriter.Kind_Ptr;
      
      function DefineDocument
      (
         this : in out ModuleBuilder.Kind;
         url : NetFrameworkBase.BSTR; 
         language : NetFrameworkBase.System.Guid.Kind_Ptr; 
         languageVendor : NetFrameworkBase.System.Guid.Kind_Ptr; 
         documentType : NetFrameworkBase.System.Guid.Kind_Ptr
      )
      return NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter.Kind_Ptr;
      
      procedure SetUserEntryPoint
      (
         this : in out ModuleBuilder.Kind;
         entryPoint : NetFrameworkBase.System.Reflection.MethodInfo.Kind_Ptr
      );
      
      procedure SetSymCustomAttribute
      (
         this : in out ModuleBuilder.Kind;
         name : NetFrameworkBase.BSTR; 
         data : NetFrameworkBase.Byte_Array
      );
      
      function IsTransient
      (
         this : in out ModuleBuilder.Kind
      )
      return NetFrameworkBase.Boolean;
      
end;
