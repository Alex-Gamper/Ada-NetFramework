--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Type_x;
limited with NetFrameworkBase.System.Collections.IComparer;
limited with NetFrameworkBase.System.Collections.IEnumerator;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Array_x is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function CreateInstance
      (
         elementType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         length : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Array_x.Kind_Ptr;
      
      function CreateInstance
      (
         elementType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         length1 : NetFrameworkBase.Int32;
         length2 : NetFrameworkBase.Int32;
         length3 : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Array_x.Kind_Ptr;
      
      function CreateInstance
      (
         elementType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         lengths : NetFrameworkBase.Int32_Array
      )
      return NetFrameworkBase.System.Array_x.Kind_Ptr;
      
      function CreateInstance
      (
         elementType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         lengths : NetFrameworkBase.Int64_Array
      )
      return NetFrameworkBase.System.Array_x.Kind_Ptr;
      
      function CreateInstance
      (
         elementType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         lengths : NetFrameworkBase.Int32_Array;
         lowerBounds : NetFrameworkBase.Int32_Array
      )
      return NetFrameworkBase.System.Array_x.Kind_Ptr;
      
      procedure Copy
      (
         sourceArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         destinationArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         length : NetFrameworkBase.Int32
      )
      ;
      
      procedure Copy
      (
         sourceArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         sourceIndex : NetFrameworkBase.Int32;
         destinationArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         destinationIndex : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32
      )
      ;
      
      procedure ConstrainedCopy
      (
         sourceArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         sourceIndex : NetFrameworkBase.Int32;
         destinationArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         destinationIndex : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32
      )
      ;
      
      procedure Copy
      (
         sourceArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         destinationArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         length : NetFrameworkBase.Int64
      )
      ;
      
      procedure Copy
      (
         sourceArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         sourceIndex : NetFrameworkBase.Int64;
         destinationArray : NetFrameworkBase.System.Array_x.Kind_Ptr;
         destinationIndex : NetFrameworkBase.Int64;
         length : NetFrameworkBase.Int64
      )
      ;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         indices : NetFrameworkBase.Int32_Array
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         index : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         index1 : NetFrameworkBase.Int32;
         index2 : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         index1 : NetFrameworkBase.Int32;
         index2 : NetFrameworkBase.Int32;
         index3 : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         index : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         index1 : NetFrameworkBase.Int64;
         index2 : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         index1 : NetFrameworkBase.Int64;
         index2 : NetFrameworkBase.Int64;
         index3 : NetFrameworkBase.Int64
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function GetValue
      (
         this : in out Array_x.Kind;
         indices : NetFrameworkBase.Int64_Array
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         index : NetFrameworkBase.Int32
      );
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         index1 : NetFrameworkBase.Int32;
         index2 : NetFrameworkBase.Int32
      );
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         index1 : NetFrameworkBase.Int32;
         index2 : NetFrameworkBase.Int32;
         index3 : NetFrameworkBase.Int32
      );
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         indices : NetFrameworkBase.Int32_Array
      );
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         index : NetFrameworkBase.Int64
      );
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         index1 : NetFrameworkBase.Int64;
         index2 : NetFrameworkBase.Int64
      );
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         index1 : NetFrameworkBase.Int64;
         index2 : NetFrameworkBase.Int64;
         index3 : NetFrameworkBase.Int64
      );
      
      procedure SetValue
      (
         this : in out Array_x.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         indices : NetFrameworkBase.Int64_Array
      );
      
      function GetLongLength
      (
         this : in out Array_x.Kind;
         dimension : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int64;
      
      function SyncRoot
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function IsReadOnly
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsFixedSize
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsSynchronized
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Clone
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      function BinarySearch
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function BinarySearch
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function BinarySearch
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         comparer : NetFrameworkBase.System.Collections.IComparer.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      procedure CopyTo
      (
         this : in out Array_x.Kind;
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32
      );
      
      procedure CopyTo
      (
         this : in out Array_x.Kind;
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int64
      );
      
      function GetEnumerator
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.System.Collections.IEnumerator.Kind_Ptr;
      
      function IndexOf
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function IndexOf
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         startIndex : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function IndexOf
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         startIndex : NetFrameworkBase.Int32;
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function LastIndexOf
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function LastIndexOf
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         startIndex : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function LastIndexOf
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         startIndex : NetFrameworkBase.Int32;
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      procedure Reverse_x
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr
      )
      ;
      
      procedure Sort
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr
      )
      ;
      
      procedure Sort
      (
         keys : NetFrameworkBase.System.Array_x.Kind_Ptr;
         items : NetFrameworkBase.System.Array_x.Kind_Ptr
      )
      ;
      
      procedure Sort
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32
      )
      ;
      
      procedure Sort
      (
         keys : NetFrameworkBase.System.Array_x.Kind_Ptr;
         items : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32
      )
      ;
      
      procedure Sort
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         comparer : NetFrameworkBase.System.Collections.IComparer.Kind_Ptr
      )
      ;
      
      procedure Sort
      (
         keys : NetFrameworkBase.System.Array_x.Kind_Ptr;
         items : NetFrameworkBase.System.Array_x.Kind_Ptr;
         comparer : NetFrameworkBase.System.Collections.IComparer.Kind_Ptr
      )
      ;
      
      procedure Sort
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32;
         comparer : NetFrameworkBase.System.Collections.IComparer.Kind_Ptr
      )
      ;
      
      function CreateInstance
      (
         elementType : NetFrameworkBase.System.Type_x.Kind_Ptr;
         length1 : NetFrameworkBase.Int32;
         length2 : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Array_x.Kind_Ptr;
      
      function LongLength
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.Int64;
      
      procedure Initialize
      (
         this : in out Array_x.Kind
      );
      
      procedure Clear
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32
      )
      ;
      
      function Length
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.Int32;
      
      function GetLength
      (
         this : in out Array_x.Kind;
         dimension : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function Rank
      (
         this : in out Array_x.Kind
      )
      return NetFrameworkBase.Int32;
      
      function GetUpperBound
      (
         this : in out Array_x.Kind;
         dimension : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function GetLowerBound
      (
         this : in out Array_x.Kind;
         dimension : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function BinarySearch
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32;
         value : NetFrameworkBase.System.Object.Kind_Ptr;
         comparer : NetFrameworkBase.System.Collections.IComparer.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      procedure Reverse_x
      (
         array_x : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32
      )
      ;
      
      procedure Sort
      (
         keys : NetFrameworkBase.System.Array_x.Kind_Ptr;
         items : NetFrameworkBase.System.Array_x.Kind_Ptr;
         index : NetFrameworkBase.Int32;
         length : NetFrameworkBase.Int32;
         comparer : NetFrameworkBase.System.Collections.IComparer.Kind_Ptr
      )
      ;
      
end;
