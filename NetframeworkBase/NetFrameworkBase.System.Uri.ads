--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.UriPartial;
limited with NetFrameworkBase.System.UriKind;
limited with NetFrameworkBase.System.UriComponents;
limited with NetFrameworkBase.System.UriFormat;
limited with NetFrameworkBase.System.StringComparison;
limited with NetFrameworkBase.System.UriHostNameType;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Uri is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function AbsolutePath
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function AbsoluteUri
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function LocalPath
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Authority
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function HostNameType
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.System.UriHostNameType.Kind;
      
      function IsDefaultPort
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsFile
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsLoopback
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function PathAndQuery
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function IsUnc
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function Host
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Port
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Query
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Fragment
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Scheme
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function OriginalString
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function IdnHost
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function IsAbsoluteUri
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function UserEscaped
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function UserInfo
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function GetLeftPart
      (
         this : in out Uri.Kind;
         part : NetFrameworkBase.System.UriPartial.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function HexUnescape
      (
         pattern : NetFrameworkBase.BSTR; 
         index : NetFrameworkBase.Int32_Ptr
      )
      return NetFrameworkBase.Wide_Char;
      
      function IsHexEncoding
      (
         pattern : NetFrameworkBase.BSTR; 
         index : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Boolean;
      
      function CheckSchemeName
      (
         schemeName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function IsHexDigit
      (
         character : NetFrameworkBase.Wide_Char
      )
      return NetFrameworkBase.Boolean;
      
      function FromHex
      (
         digit : NetFrameworkBase.Wide_Char
      )
      return NetFrameworkBase.Int32;
      
      function GetHashCode
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Int32;
      
      function ToString
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function op_Equality
      (
         uri1 : NetFrameworkBase.System.Uri.Kind_Ptr; 
         uri2 : NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      function "="(uri1 : NetFrameworkBase.System.Uri.Kind_Ptr; uri2 : NetFrameworkBase.System.Uri.Kind_Ptr) return NetFrameworkBase.Boolean renames op_Equality;
      
      function op_Inequality
      (
         uri1 : NetFrameworkBase.System.Uri.Kind_Ptr; 
         uri2 : NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Equals
      (
         this : in out Uri.Kind;
         comparand : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function MakeRelative
      (
         this : in out Uri.Kind;
         toUri : NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.BSTR;
      
      function TryCreate
      (
         uriString : NetFrameworkBase.BSTR; 
         uriKind : NetFrameworkBase.System.UriKind.Kind; 
         result : out NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function TryCreate
      (
         baseUri : NetFrameworkBase.System.Uri.Kind_Ptr; 
         relativeUri : NetFrameworkBase.BSTR; 
         result : out NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function TryCreate
      (
         baseUri : NetFrameworkBase.System.Uri.Kind_Ptr; 
         relativeUri : NetFrameworkBase.System.Uri.Kind_Ptr; 
         result : out NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function GetComponents
      (
         this : in out Uri.Kind;
         components : NetFrameworkBase.System.UriComponents.Kind; 
         format : NetFrameworkBase.System.UriFormat.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function Compare
      (
         uri1 : NetFrameworkBase.System.Uri.Kind_Ptr; 
         uri2 : NetFrameworkBase.System.Uri.Kind_Ptr; 
         partsToCompare : NetFrameworkBase.System.UriComponents.Kind; 
         compareFormat : NetFrameworkBase.System.UriFormat.Kind; 
         comparisonType : NetFrameworkBase.System.StringComparison.Kind
      )
      return NetFrameworkBase.Int32;
      
      function IsWellFormedOriginalString
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function IsWellFormedUriString
      (
         uriString : NetFrameworkBase.BSTR; 
         uriKind : NetFrameworkBase.System.UriKind.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function EscapeUriString
      (
         stringToEscape : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.BSTR;
      
      function EscapeDataString
      (
         stringToEscape : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.BSTR;
      
      function IsBaseOf
      (
         this : in out Uri.Kind;
         uri : NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function Segments
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR_Array;
      
      function CheckHostName
      (
         name : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.UriHostNameType.Kind;
      
      function HexEscape
      (
         character : NetFrameworkBase.Wide_Char
      )
      return NetFrameworkBase.BSTR;
      
      function DnsSafeHost
      (
         this : in out Uri.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function MakeRelativeUri
      (
         this : in out Uri.Kind;
         uri : NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.System.Uri.Kind_Ptr;
      
      function UnescapeDataString
      (
         stringToUnescape : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.BSTR;
      
      function Constructor
      (
         uriString : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Uri.Kind_Ptr;
      
      function Constructor
      (
         uriString : NetFrameworkBase.BSTR;
         dontEscape : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Uri.Kind_Ptr;
      
      function Constructor
      (
         baseUri : NetFrameworkBase.System.Uri.Kind_Ptr;
         relativeUri : NetFrameworkBase.BSTR;
         dontEscape : NetFrameworkBase.Boolean
      )
      return NetFrameworkBase.System.Uri.Kind_Ptr;
      
      function Constructor
      (
         uriString : NetFrameworkBase.BSTR;
         uriKind : NetFrameworkBase.System.UriKind.Kind
      )
      return NetFrameworkBase.System.Uri.Kind_Ptr;
      
      function Constructor
      (
         baseUri : NetFrameworkBase.System.Uri.Kind_Ptr;
         relativeUri : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Uri.Kind_Ptr;
      
      function Constructor
      (
         baseUri : NetFrameworkBase.System.Uri.Kind_Ptr;
         relativeUri : NetFrameworkBase.System.Uri.Kind_Ptr
      )
      return NetFrameworkBase.System.Uri.Kind_Ptr;
      
end;
