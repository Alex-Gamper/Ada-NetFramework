--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.ComponentModel.Component;
limited with NetFrameworkBase.System.IO.Ports.SerialErrorReceivedEventHandler;
limited with NetFrameworkBase.System.IO.Ports.SerialPinChangedEventHandler;
limited with NetFrameworkBase.System.IO.Ports.SerialDataReceivedEventHandler;
limited with NetFrameworkBase.System.Text.Encoding;
limited with NetFrameworkBase.System.IO.Ports.Handshake;
limited with NetFrameworkBase.System.IO.Ports.Parity;
limited with NetFrameworkBase.System.IO.Ports.StopBits;
limited with NetFrameworkBase.System.ComponentModel.IContainer;
limited with NetFrameworkBase.System.IO.Stream;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.IO.Ports.SerialPort is
   
   type Kind is new NetFrameworkBase.System.ComponentModel.Component.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      procedure add_ErrorReceived
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.SerialErrorReceivedEventHandler.Kind_Ptr
      );
      
      procedure remove_ErrorReceived
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.SerialErrorReceivedEventHandler.Kind_Ptr
      );
      
      procedure add_PinChanged
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.SerialPinChangedEventHandler.Kind_Ptr
      );
      
      procedure remove_PinChanged
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.SerialPinChangedEventHandler.Kind_Ptr
      );
      
      procedure add_DataReceived
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.SerialDataReceivedEventHandler.Kind_Ptr
      );
      
      procedure remove_DataReceived
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.SerialDataReceivedEventHandler.Kind_Ptr
      );
      
      function BaseStream
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.System.IO.Stream.Kind_Ptr;
      
      function BaudRate
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure BaudRate
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function BreakState
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure BreakState
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function BytesToWrite
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      function BytesToRead
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      function CDHolding
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function CtsHolding
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function DataBits
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure DataBits
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function DiscardNull
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure DiscardNull
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function DsrHolding
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function DtrEnable
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure DtrEnable
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function Encoding
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.System.Text.Encoding.Kind_Ptr;
      
      procedure Encoding
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.Text.Encoding.Kind_Ptr
      );
      
      function Handshake
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.System.IO.Ports.Handshake.Kind;
      
      procedure Handshake
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.Handshake.Kind
      );
      
      function IsOpen
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function NewLine
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure NewLine
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function Parity
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.System.IO.Ports.Parity.Kind;
      
      procedure Parity
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.Parity.Kind
      );
      
      function ParityReplace
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Byte;
      
      procedure ParityReplace
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Byte
      );
      
      function PortName
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.BSTR;
      
      procedure PortName
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function ReadBufferSize
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure ReadBufferSize
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function ReadTimeout
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure ReadTimeout
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function ReceivedBytesThreshold
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure ReceivedBytesThreshold
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function RtsEnable
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure RtsEnable
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function StopBits
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.System.IO.Ports.StopBits.Kind;
      
      procedure StopBits
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.System.IO.Ports.StopBits.Kind
      );
      
      function WriteBufferSize
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure WriteBufferSize
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function WriteTimeout
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure WriteTimeout
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.Int32
      );
      
      procedure Close
      (
         this : in out SerialPort.Kind
      );
      
      procedure DiscardInBuffer
      (
         this : in out SerialPort.Kind
      );
      
      procedure DiscardOutBuffer
      (
         this : in out SerialPort.Kind
      );
      
      function GetPortNames
      return NetFrameworkBase.BSTR_Array;
      
      procedure Open
      (
         this : in out SerialPort.Kind
      );
      
      function Read
      (
         this : in out SerialPort.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function ReadChar
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Read
      (
         this : in out SerialPort.Kind;
         buffer : NetFrameworkBase.Wide_Char_Array; 
         offset : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Int32;
      
      function ReadByte
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.Int32;
      
      function ReadExisting
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ReadLine
      (
         this : in out SerialPort.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function ReadTo
      (
         this : in out SerialPort.Kind;
         value : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.BSTR;
      
      procedure Write
      (
         this : in out SerialPort.Kind;
         text : NetFrameworkBase.BSTR
      );
      
      procedure Write
      (
         this : in out SerialPort.Kind;
         buffer : NetFrameworkBase.Wide_Char_Array; 
         offset : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      );
      
      procedure Write
      (
         this : in out SerialPort.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      );
      
      procedure WriteLine
      (
         this : in out SerialPort.Kind;
         text : NetFrameworkBase.BSTR
      );
      
      function Constructor
      (
         container : NetFrameworkBase.System.ComponentModel.IContainer.Kind_Ptr
      )
      return NetFrameworkBase.System.IO.Ports.SerialPort.Kind_Ptr;
      
      function Constructor return NetFrameworkBase.System.IO.Ports.SerialPort.Kind_Ptr;
      
      function Constructor
      (
         portName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.IO.Ports.SerialPort.Kind_Ptr;
      
      function Constructor
      (
         portName : NetFrameworkBase.BSTR;
         baudRate : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.IO.Ports.SerialPort.Kind_Ptr;
      
      function Constructor
      (
         portName : NetFrameworkBase.BSTR;
         baudRate : NetFrameworkBase.Int32;
         parity : NetFrameworkBase.System.IO.Ports.Parity.Kind
      )
      return NetFrameworkBase.System.IO.Ports.SerialPort.Kind_Ptr;
      
      function Constructor
      (
         portName : NetFrameworkBase.BSTR;
         baudRate : NetFrameworkBase.Int32;
         parity : NetFrameworkBase.System.IO.Ports.Parity.Kind;
         dataBits : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.IO.Ports.SerialPort.Kind_Ptr;
      
      function Constructor
      (
         portName : NetFrameworkBase.BSTR;
         baudRate : NetFrameworkBase.Int32;
         parity : NetFrameworkBase.System.IO.Ports.Parity.Kind;
         dataBits : NetFrameworkBase.Int32;
         stopBits : NetFrameworkBase.System.IO.Ports.StopBits.Kind
      )
      return NetFrameworkBase.System.IO.Ports.SerialPort.Kind_Ptr;
      
end;
