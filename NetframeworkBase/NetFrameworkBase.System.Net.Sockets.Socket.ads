--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Net.Sockets.LingerOption;
limited with NetFrameworkBase.System.Net.EndPoint;
limited with NetFrameworkBase.System.Net.Sockets.SocketFlags;
limited with NetFrameworkBase.System.Net.Sockets.IOControlCode;
limited with NetFrameworkBase.System.Net.Sockets.IPProtectionLevel;
limited with NetFrameworkBase.System.Net.Sockets.SocketOptionLevel;
limited with NetFrameworkBase.System.Net.Sockets.SocketOptionName;
limited with NetFrameworkBase.System.AsyncCallback;
limited with NetFrameworkBase.System.Net.Sockets.TransmitFileOptions;
limited with NetFrameworkBase.System.IAsyncResult;
limited with NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs;
limited with NetFrameworkBase.System.Net.IPAddress;
limited with NetFrameworkBase.System.Net.Sockets.SocketError;
limited with NetFrameworkBase.System.Net.Sockets.IPPacketInformation;
limited with NetFrameworkBase.System.Collections.IList;
limited with NetFrameworkBase.System.Net.Sockets.SocketShutdown;
limited with NetFrameworkBase.System.Net.Sockets.SocketType;
limited with NetFrameworkBase.System.Net.Sockets.ProtocolType;
limited with NetFrameworkBase.System.Net.Sockets.SelectMode;
limited with NetFrameworkBase.System.Net.Sockets.AddressFamily;
limited with NetFrameworkBase.System.Net.Sockets.SocketInformation;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Net.Sockets.Socket is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function SupportsIPv4
      return NetFrameworkBase.Boolean;
      
      function OSSupportsIPv4
      return NetFrameworkBase.Boolean;
      
      function SupportsIPv6
      return NetFrameworkBase.Boolean;
      
      function OSSupportsIPv6
      return NetFrameworkBase.Boolean;
      
      function Handle
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.IntPtr;
      
      function Blocking
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function UseOnlyOverlappedIO
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure UseOnlyOverlappedIO
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function Connected
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function AddressFamily
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.AddressFamily.Kind;
      
      function SocketType
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.SocketType.Kind;
      
      function ProtocolType
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.ProtocolType.Kind;
      
      function IsBound
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      function ExclusiveAddressUse
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure ExclusiveAddressUse
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function ReceiveBufferSize
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure ReceiveBufferSize
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function SendBufferSize
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure SendBufferSize
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function ReceiveTimeout
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure ReceiveTimeout
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function SendTimeout
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure SendTimeout
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function LingerState
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.LingerOption.Kind_Ptr;
      
      procedure LingerState
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.System.Net.Sockets.LingerOption.Kind_Ptr
      );
      
      function NoDelay
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure NoDelay
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function Ttl
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Int16;
      
      procedure Ttl
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Int16
      );
      
      function DontFragment
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure DontFragment
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function MulticastLoopback
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure MulticastLoopback
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function EnableBroadcast
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure EnableBroadcast
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function DualMode
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure DualMode
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      procedure Connect
      (
         this : in out Socket.Kind;
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      );
      
      procedure Close
      (
         this : in out Socket.Kind;
         timeout : NetFrameworkBase.Int32
      );
      
      function Send
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Send
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Send
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array
      )
      return NetFrameworkBase.Int32;
      
      procedure SendFile
      (
         this : in out Socket.Kind;
         fileName : NetFrameworkBase.BSTR
      );
      
      function Send
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind
      )
      return NetFrameworkBase.Int32;
      
      function SendTo
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function SendTo
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function SendTo
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function Receive
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Receive
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Receive
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array
      )
      return NetFrameworkBase.Int32;
      
      function Receive
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind
      )
      return NetFrameworkBase.Int32;
      
      function ReceiveFrom
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function ReceiveFrom
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function ReceiveFrom
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function IOControl
      (
         this : in out Socket.Kind;
         ioControlCode : NetFrameworkBase.System.Net.Sockets.IOControlCode.Kind; 
         optionInValue : NetFrameworkBase.Byte_Array; 
         optionOutValue : NetFrameworkBase.Byte_Array
      )
      return NetFrameworkBase.Int32;
      
      procedure SetIPProtectionLevel
      (
         this : in out Socket.Kind;
         level : NetFrameworkBase.System.Net.Sockets.IPProtectionLevel.Kind
      );
      
      procedure SetSocketOption
      (
         this : in out Socket.Kind;
         optionLevel : NetFrameworkBase.System.Net.Sockets.SocketOptionLevel.Kind; 
         optionName : NetFrameworkBase.System.Net.Sockets.SocketOptionName.Kind; 
         optionValue : NetFrameworkBase.Int32
      );
      
      procedure SetSocketOption
      (
         this : in out Socket.Kind;
         optionLevel : NetFrameworkBase.System.Net.Sockets.SocketOptionLevel.Kind; 
         optionName : NetFrameworkBase.System.Net.Sockets.SocketOptionName.Kind; 
         optionValue : NetFrameworkBase.Boolean
      );
      
      function BeginSendFile
      (
         this : in out Socket.Kind;
         fileName : NetFrameworkBase.BSTR; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function BeginDisconnect
      (
         this : in out Socket.Kind;
         reuseSocket : NetFrameworkBase.Boolean; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function BeginSend
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function BeginSendFile
      (
         this : in out Socket.Kind;
         fileName : NetFrameworkBase.BSTR; 
         preBuffer : NetFrameworkBase.Byte_Array; 
         postBuffer : NetFrameworkBase.Byte_Array; 
         flags : NetFrameworkBase.System.Net.Sockets.TransmitFileOptions.Kind; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndSend
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function BeginReceive
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndReceive
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function BeginAccept
      (
         this : in out Socket.Kind;
         receiveSize : NetFrameworkBase.Int32; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      procedure Dispose
      (
         this : in out Socket.Kind
      );
      
      procedure CancelConnectAsync
      (
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      ;
      
      function Available
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.Int32;
      
      function LocalEndPoint
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.System.Net.EndPoint.Kind_Ptr;
      
      function RemoteEndPoint
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.System.Net.EndPoint.Kind_Ptr;
      
      procedure Blocking
      (
         this : in out Socket.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      procedure Connect
      (
         this : in out Socket.Kind;
         address : NetFrameworkBase.System.Net.IPAddress.Kind_Ptr; 
         port : NetFrameworkBase.Int32
      );
      
      procedure Connect
      (
         this : in out Socket.Kind;
         host : NetFrameworkBase.BSTR; 
         port : NetFrameworkBase.Int32
      );
      
      procedure Connect
      (
         this : in out Socket.Kind;
         addresses : NetFrameworkBase.System.Net.IPAddress.Kind_Array; 
         port : NetFrameworkBase.Int32
      );
      
      procedure SendFile
      (
         this : in out Socket.Kind;
         fileName : NetFrameworkBase.BSTR; 
         preBuffer : NetFrameworkBase.Byte_Array; 
         postBuffer : NetFrameworkBase.Byte_Array; 
         flags : NetFrameworkBase.System.Net.Sockets.TransmitFileOptions.Kind
      );
      
      function SendTo
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function ReceiveMessageFrom
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr; 
         ipPacketInformation : out NetFrameworkBase.System.Net.Sockets.IPPacketInformation.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function ReceiveFrom
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function IOControl
      (
         this : in out Socket.Kind;
         ioControlCode : NetFrameworkBase.Int32; 
         optionInValue : NetFrameworkBase.Byte_Array; 
         optionOutValue : NetFrameworkBase.Byte_Array
      )
      return NetFrameworkBase.Int32;
      
      procedure SetSocketOption
      (
         this : in out Socket.Kind;
         optionLevel : NetFrameworkBase.System.Net.Sockets.SocketOptionLevel.Kind; 
         optionName : NetFrameworkBase.System.Net.Sockets.SocketOptionName.Kind; 
         optionValue : NetFrameworkBase.Byte_Array
      );
      
      procedure SetSocketOption
      (
         this : in out Socket.Kind;
         optionLevel : NetFrameworkBase.System.Net.Sockets.SocketOptionLevel.Kind; 
         optionName : NetFrameworkBase.System.Net.Sockets.SocketOptionName.Kind; 
         optionValue : NetFrameworkBase.System.Object.Kind_Ptr
      );
      
      function GetSocketOption
      (
         this : in out Socket.Kind;
         optionLevel : NetFrameworkBase.System.Net.Sockets.SocketOptionLevel.Kind; 
         optionName : NetFrameworkBase.System.Net.Sockets.SocketOptionName.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure GetSocketOption
      (
         this : in out Socket.Kind;
         optionLevel : NetFrameworkBase.System.Net.Sockets.SocketOptionLevel.Kind; 
         optionName : NetFrameworkBase.System.Net.Sockets.SocketOptionName.Kind; 
         optionValue : NetFrameworkBase.Byte_Array
      );
      
      function GetSocketOption
      (
         this : in out Socket.Kind;
         optionLevel : NetFrameworkBase.System.Net.Sockets.SocketOptionLevel.Kind; 
         optionName : NetFrameworkBase.System.Net.Sockets.SocketOptionName.Kind; 
         optionLength : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.Byte_Array;
      
      procedure Select_x
      (
         checkRead : NetFrameworkBase.System.Collections.IList.Kind_Ptr; 
         checkWrite : NetFrameworkBase.System.Collections.IList.Kind_Ptr; 
         checkError : NetFrameworkBase.System.Collections.IList.Kind_Ptr; 
         microSeconds : NetFrameworkBase.Int32
      )
      ;
      
      function BeginConnect
      (
         this : in out Socket.Kind;
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function DuplicateAndClose
      (
         this : in out Socket.Kind;
         targetProcessId : NetFrameworkBase.Int32
      )
      return NetFrameworkBase.System.Net.Sockets.SocketInformation.Kind_Ptr;
      
      function BeginConnect
      (
         this : in out Socket.Kind;
         host : NetFrameworkBase.BSTR; 
         port : NetFrameworkBase.Int32; 
         requestCallback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function BeginConnect
      (
         this : in out Socket.Kind;
         address : NetFrameworkBase.System.Net.IPAddress.Kind_Ptr; 
         port : NetFrameworkBase.Int32; 
         requestCallback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function BeginConnect
      (
         this : in out Socket.Kind;
         addresses : NetFrameworkBase.System.Net.IPAddress.Kind_Array; 
         port : NetFrameworkBase.Int32; 
         requestCallback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      procedure Disconnect
      (
         this : in out Socket.Kind;
         reuseSocket : NetFrameworkBase.Boolean
      );
      
      procedure EndDisconnect
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      );
      
      procedure EndSendFile
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      );
      
      function BeginSendTo
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndSendTo
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function BeginReceiveMessageFrom
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndReceiveMessageFrom
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         endPoint : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr; 
         ipPacketInformation : out NetFrameworkBase.System.Net.Sockets.IPPacketInformation.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function BeginReceiveFrom
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         remoteEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndReceiveFrom
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr; 
         endPoint : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      )
      return NetFrameworkBase.Int32;
      
      function BeginAccept
      (
         this : in out Socket.Kind;
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function BeginAccept
      (
         this : in out Socket.Kind;
         acceptSocket : NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr; 
         receiveSize : NetFrameworkBase.Int32; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndAccept
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function EndAccept
      (
         this : in out Socket.Kind;
         buffer : out NetFrameworkBase.Byte_Array_Ptr; 
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function EndAccept
      (
         this : in out Socket.Kind;
         buffer : out NetFrameworkBase.Byte_Array_Ptr; 
         bytesTransferred : out NetFrameworkBase.Int32; 
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      procedure Shutdown
      (
         this : in out Socket.Kind;
         how : NetFrameworkBase.System.Net.Sockets.SocketShutdown.Kind
      );
      
      function AcceptAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function ConnectAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function ConnectAsync
      (
         socketType : NetFrameworkBase.System.Net.Sockets.SocketType.Kind; 
         protocolType : NetFrameworkBase.System.Net.Sockets.ProtocolType.Kind; 
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function DisconnectAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function ReceiveAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function ReceiveFromAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function ReceiveMessageFromAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function SendAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function SendPacketsAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      function SendToAsync
      (
         this : in out Socket.Kind;
         e : NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr
      )
      return NetFrameworkBase.Boolean;
      
      procedure Bind
      (
         this : in out Socket.Kind;
         localEP : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      );
      
      procedure Close
      (
         this : in out Socket.Kind
      );
      
      procedure Listen
      (
         this : in out Socket.Kind;
         backlog : NetFrameworkBase.Int32
      );
      
      function Accept_x
      (
         this : in out Socket.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function Send
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         errorCode : out NetFrameworkBase.System.Net.Sockets.SocketError.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Receive
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         errorCode : out NetFrameworkBase.System.Net.Sockets.SocketError.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Poll
      (
         this : in out Socket.Kind;
         microSeconds : NetFrameworkBase.Int32; 
         mode : NetFrameworkBase.System.Net.Sockets.SelectMode.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure EndConnect
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr
      );
      
      function BeginSend
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         errorCode : out NetFrameworkBase.System.Net.Sockets.SocketError.Kind; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndSend
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr; 
         errorCode : out NetFrameworkBase.System.Net.Sockets.SocketError.Kind
      )
      return NetFrameworkBase.Int32;
      
      function BeginReceive
      (
         this : in out Socket.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         size : NetFrameworkBase.Int32; 
         socketFlags : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind; 
         errorCode : out NetFrameworkBase.System.Net.Sockets.SocketError.Kind; 
         callback : NetFrameworkBase.System.AsyncCallback.Kind_Ptr; 
         state : NetFrameworkBase.System.Object.Kind_Ptr
      )
      return NetFrameworkBase.System.IAsyncResult.Kind_Ptr;
      
      function EndReceive
      (
         this : in out Socket.Kind;
         asyncResult : NetFrameworkBase.System.IAsyncResult.Kind_Ptr; 
         errorCode : out NetFrameworkBase.System.Net.Sockets.SocketError.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Constructor
      (
         socketType : NetFrameworkBase.System.Net.Sockets.SocketType.Kind;
         protocolType : NetFrameworkBase.System.Net.Sockets.ProtocolType.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function Constructor
      (
         addressFamily : NetFrameworkBase.System.Net.Sockets.AddressFamily.Kind;
         socketType : NetFrameworkBase.System.Net.Sockets.SocketType.Kind;
         protocolType : NetFrameworkBase.System.Net.Sockets.ProtocolType.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function Constructor
      (
         socketInformation : NetFrameworkBase.System.Net.Sockets.SocketInformation.Kind_Ptr
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
end;
