--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Diagnostics.CounterCreationDataCollection;
limited with NetFrameworkBase.System.Diagnostics.PerformanceCounterCategoryType;
limited with NetFrameworkBase.System.Diagnostics.PerformanceCounter;
limited with NetFrameworkBase.System.Diagnostics.InstanceDataCollectionCollection;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory is
   
   type Kind is new NetFrameworkBase.System.Object.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function CategoryName
      (
         this : in out PerformanceCounterCategory.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function CategoryHelp
      (
         this : in out PerformanceCounterCategory.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function MachineName
      (
         this : in out PerformanceCounterCategory.Kind
      )
      return NetFrameworkBase.BSTR;
      
      function CounterExists
      (
         this : in out PerformanceCounterCategory.Kind;
         counterName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function Create
      (
         categoryName : NetFrameworkBase.BSTR; 
         categoryHelp : NetFrameworkBase.BSTR; 
         counterData : NetFrameworkBase.System.Diagnostics.CounterCreationDataCollection.Kind_Ptr
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Ptr;
      
      function GetCounters
      (
         this : in out PerformanceCounterCategory.Kind
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounter.Kind_Array;
      
      function GetInstanceNames
      (
         this : in out PerformanceCounterCategory.Kind
      )
      return NetFrameworkBase.BSTR_Array;
      
      function InstanceExists
      (
         this : in out PerformanceCounterCategory.Kind;
         instanceName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function ReadCategory
      (
         this : in out PerformanceCounterCategory.Kind
      )
      return NetFrameworkBase.System.Diagnostics.InstanceDataCollectionCollection.Kind_Ptr;
      
      procedure CategoryName
      (
         this : in out PerformanceCounterCategory.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function CategoryType
      (
         this : in out PerformanceCounterCategory.Kind
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategoryType.Kind;
      
      procedure MachineName
      (
         this : in out PerformanceCounterCategory.Kind;
         value : NetFrameworkBase.BSTR
      );
      
      function CounterExists
      (
         counterName : NetFrameworkBase.BSTR; 
         categoryName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function CounterExists
      (
         counterName : NetFrameworkBase.BSTR; 
         categoryName : NetFrameworkBase.BSTR; 
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function Create
      (
         categoryName : NetFrameworkBase.BSTR; 
         categoryHelp : NetFrameworkBase.BSTR; 
         counterName : NetFrameworkBase.BSTR; 
         counterHelp : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Ptr;
      
      function Create
      (
         categoryName : NetFrameworkBase.BSTR; 
         categoryHelp : NetFrameworkBase.BSTR; 
         categoryType : NetFrameworkBase.System.Diagnostics.PerformanceCounterCategoryType.Kind; 
         counterName : NetFrameworkBase.BSTR; 
         counterHelp : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Ptr;
      
      function Create
      (
         categoryName : NetFrameworkBase.BSTR; 
         categoryHelp : NetFrameworkBase.BSTR; 
         categoryType : NetFrameworkBase.System.Diagnostics.PerformanceCounterCategoryType.Kind; 
         counterData : NetFrameworkBase.System.Diagnostics.CounterCreationDataCollection.Kind_Ptr
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Ptr;
      
      procedure Delete
      (
         categoryName : NetFrameworkBase.BSTR
      )
      ;
      
      function Exists
      (
         categoryName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function Exists
      (
         categoryName : NetFrameworkBase.BSTR; 
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function GetCounters
      (
         this : in out PerformanceCounterCategory.Kind;
         instanceName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounter.Kind_Array;
      
      function GetCategories
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Array;
      
      function GetCategories
      (
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Array;
      
      function InstanceExists
      (
         instanceName : NetFrameworkBase.BSTR; 
         categoryName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function InstanceExists
      (
         instanceName : NetFrameworkBase.BSTR; 
         categoryName : NetFrameworkBase.BSTR; 
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.Boolean;
      
      function Constructor return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Ptr;
      
      function Constructor
      (
         categoryName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Ptr;
      
      function Constructor
      (
         categoryName : NetFrameworkBase.BSTR;
         machineName : NetFrameworkBase.BSTR
      )
      return NetFrameworkBase.System.Diagnostics.PerformanceCounterCategory.Kind_Ptr;
      
end;
