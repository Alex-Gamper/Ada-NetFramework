--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
with NetFrameworkBase.System.EventArgs;
limited with NetFrameworkBase.System.Net.Sockets.SocketClientAccessPolicyProtocol;
limited with NetFrameworkBase.System.Net.Sockets.Socket;
limited with NetFrameworkBase.System.Net.EndPoint;
limited with NetFrameworkBase.System.Net.Sockets.SendPacketsElement;
limited with NetFrameworkBase.System.Net.Sockets.TransmitFileOptions;
limited with NetFrameworkBase.System.Net.Sockets.SocketError;
limited with NetFrameworkBase.System.Net.Sockets.SocketFlags;
with NetFrameworkBase.System.Object;
limited with NetFrameworkBase.System.Net.Sockets.SocketAsyncOperation;
limited with NetFrameworkBase.System.Net.Sockets.IPPacketInformation;
limited with NetFrameworkBase.System.Exception_x;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs is
   
   type Kind is new NetFrameworkBase.System.EventArgs.Kind with null record;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array(Natural range<>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function SocketClientAccessPolicyProtocol
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.SocketClientAccessPolicyProtocol.Kind;
      
      procedure SocketClientAccessPolicyProtocol
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Net.Sockets.SocketClientAccessPolicyProtocol.Kind
      );
      
      function AcceptSocket
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      procedure AcceptSocket
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr
      );
      
      function ConnectSocket
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.Socket.Kind_Ptr;
      
      function Buffer
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.Byte_Array;
      
      function Offset
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.Int32;
      
      function Count
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.Int32;
      
      function BytesTransferred
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.Int32;
      
      function DisconnectReuseSocket
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.Boolean;
      
      procedure DisconnectReuseSocket
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.Boolean
      );
      
      function LastOperation
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.SocketAsyncOperation.Kind;
      
      function ReceiveMessageFromPacketInfo
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.IPPacketInformation.Kind_Ptr;
      
      function RemoteEndPoint
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.EndPoint.Kind_Ptr;
      
      procedure RemoteEndPoint
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Net.EndPoint.Kind_Ptr
      );
      
      function SendPacketsElements
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.SendPacketsElement.Kind_Array;
      
      procedure SendPacketsElements
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Net.Sockets.SendPacketsElement.Kind_Array
      );
      
      function SendPacketsFlags
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.TransmitFileOptions.Kind;
      
      procedure SendPacketsFlags
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Net.Sockets.TransmitFileOptions.Kind
      );
      
      function SendPacketsSendSize
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.Int32;
      
      procedure SendPacketsSendSize
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.Int32
      );
      
      function SocketError
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.SocketError.Kind;
      
      procedure SocketError
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Net.Sockets.SocketError.Kind
      );
      
      function ConnectByNameError
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Exception_x.Kind_Ptr;
      
      function SocketFlags
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind;
      
      procedure SocketFlags
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Net.Sockets.SocketFlags.Kind
      );
      
      function UserToken
      (
         this : in out SocketAsyncEventArgs.Kind
      )
      return NetFrameworkBase.System.Object.Kind_Ptr;
      
      procedure UserToken
      (
         this : in out SocketAsyncEventArgs.Kind;
         value : NetFrameworkBase.System.Object.Kind_Ptr
      );
      
      procedure SetBuffer
      (
         this : in out SocketAsyncEventArgs.Kind;
         buffer : NetFrameworkBase.Byte_Array; 
         offset : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      );
      
      procedure SetBuffer
      (
         this : in out SocketAsyncEventArgs.Kind;
         offset : NetFrameworkBase.Int32; 
         count : NetFrameworkBase.Int32
      );
      
      procedure Dispose
      (
         this : in out SocketAsyncEventArgs.Kind
      );
      
      function Constructor return NetFrameworkBase.System.Net.Sockets.SocketAsyncEventArgs.Kind_Ptr;
      
end;
