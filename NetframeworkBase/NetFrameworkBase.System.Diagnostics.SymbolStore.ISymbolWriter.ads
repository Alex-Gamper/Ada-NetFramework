--------------------------------------------------------------------------------
-- <auto-generated>                                                           --
--     This code was generated by a tool.                                     --
--                                                                            --
--     Changes to this file may cause incorrect behavior and will be lost if  --
--     the code is regenerated.                                               --
-- </auto-generated>                                                          --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--                                                                            --
--    Copyright(c) 2019 Alexander Gamper, All Rights Reserved.                --
--                                                                            --
--    Ada-NetFramework                                                        --
--    Version   : 1.0.0.0                                                     --
--                                                                            --
-- This program is free software: you can redistribute it and / or modify     --
-- it under the terms of the GNU Lesser General Public License as published by--
-- the Free Software Foundation, either version 3 of the License, or          --
-- (at your option) any later version.                                        --
--                                                                            --
-- This program is distributed in the hope that it will be useful,            --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of             --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               --
-- GNU Lesser General Public License for more details.                        --
--                                                                            --
-- You should have received a copy of the GNU Lesser General Public License   --
-- along with this program.If not, see http://www.gnu.org/licenses            --
--                                                                            --
--------------------------------------------------------------------------------
limited with NetFrameworkBase.System.Guid;
limited with NetFrameworkBase.System.Diagnostics.SymbolStore.SymbolToken;
limited with NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter;
limited with NetFrameworkBase.System.Reflection.FieldAttributes;
limited with NetFrameworkBase.System.Diagnostics.SymbolStore.SymAddressKind;
limited with NetFrameworkBase.System.Reflection.ParameterAttributes;
with NetFrameworkWin32;
with NetFrameworkAdaRuntime;
--------------------------------------------------------------------------------
package NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolWriter is
   
   type Kind is interface and NetFrameworkWin32.IUnknown;
   type Kind_Ptr is access all Kind;
   type Kind_Array is array (Natural range <>) of Kind_Ptr;
   type Kind_Array_Ptr is access all Kind_Array;
   
      function Initialize
      (
         this : in out ISymbolWriter.Kind;
         emitter : NetFrameworkBase.IntPtr;
         filename : NetFrameworkBase.BSTR;
         fFullBuild : NetFrameworkBase.Boolean
      ) return HResult is abstract;
      
      function DefineDocument
      (
         this : in out ISymbolWriter.Kind;
         url : NetFrameworkBase.BSTR;
         language : NetFrameworkBase.System.Guid.Kind;
         languageVendor : NetFrameworkBase.System.Guid.Kind;
         documentType : NetFrameworkBase.System.Guid.Kind;
         RetVal : access NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter.Kind_Ptr
      ) return HResult is abstract;
      
      function SetUserEntryPoint
      (
         this : in out ISymbolWriter.Kind;
         entryMethod : NetFrameworkBase.System.Diagnostics.SymbolStore.SymbolToken.Kind
      ) return HResult is abstract;
      
      function OpenMethod
      (
         this : in out ISymbolWriter.Kind;
         method : NetFrameworkBase.System.Diagnostics.SymbolStore.SymbolToken.Kind
      ) return HResult is abstract;
      
      function CloseMethod
      (
         this : in out ISymbolWriter.Kind
      ) return HResult is abstract;
      
      function DefineSequencePoints
      (
         this : in out ISymbolWriter.Kind;
         document : NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter.Kind_Ptr;
         offsets : NetFrameworkBase.Int32_Array;
         lines : NetFrameworkBase.Int32_Array;
         columns : NetFrameworkBase.Int32_Array;
         endLines : NetFrameworkBase.Int32_Array;
         endColumns : NetFrameworkBase.Int32_Array
      ) return HResult is abstract;
      
      function OpenScope
      (
         this : in out ISymbolWriter.Kind;
         startOffset : NetFrameworkBase.Int32;
         RetVal : access NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function CloseScope
      (
         this : in out ISymbolWriter.Kind;
         endOffset : NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function SetScopeRange
      (
         this : in out ISymbolWriter.Kind;
         scopeID : NetFrameworkBase.Int32;
         startOffset : NetFrameworkBase.Int32;
         endOffset : NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function DefineLocalVariable
      (
         this : in out ISymbolWriter.Kind;
         name : NetFrameworkBase.BSTR;
         attributes : NetFrameworkBase.System.Reflection.FieldAttributes.Kind;
         signature : NetFrameworkBase.Byte_Array;
         addrKind : NetFrameworkBase.System.Diagnostics.SymbolStore.SymAddressKind.Kind;
         addr1 : NetFrameworkBase.Int32;
         addr2 : NetFrameworkBase.Int32;
         addr3 : NetFrameworkBase.Int32;
         startOffset : NetFrameworkBase.Int32;
         endOffset : NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function DefineParameter
      (
         this : in out ISymbolWriter.Kind;
         name : NetFrameworkBase.BSTR;
         attributes : NetFrameworkBase.System.Reflection.ParameterAttributes.Kind;
         sequence : NetFrameworkBase.Int32;
         addrKind : NetFrameworkBase.System.Diagnostics.SymbolStore.SymAddressKind.Kind;
         addr1 : NetFrameworkBase.Int32;
         addr2 : NetFrameworkBase.Int32;
         addr3 : NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function DefineField
      (
         this : in out ISymbolWriter.Kind;
         parent : NetFrameworkBase.System.Diagnostics.SymbolStore.SymbolToken.Kind;
         name : NetFrameworkBase.BSTR;
         attributes : NetFrameworkBase.System.Reflection.FieldAttributes.Kind;
         signature : NetFrameworkBase.Byte_Array;
         addrKind : NetFrameworkBase.System.Diagnostics.SymbolStore.SymAddressKind.Kind;
         addr1 : NetFrameworkBase.Int32;
         addr2 : NetFrameworkBase.Int32;
         addr3 : NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function DefineGlobalVariable
      (
         this : in out ISymbolWriter.Kind;
         name : NetFrameworkBase.BSTR;
         attributes : NetFrameworkBase.System.Reflection.FieldAttributes.Kind;
         signature : NetFrameworkBase.Byte_Array;
         addrKind : NetFrameworkBase.System.Diagnostics.SymbolStore.SymAddressKind.Kind;
         addr1 : NetFrameworkBase.Int32;
         addr2 : NetFrameworkBase.Int32;
         addr3 : NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function Close
      (
         this : in out ISymbolWriter.Kind
      ) return HResult is abstract;
      
      function SetSymAttribute
      (
         this : in out ISymbolWriter.Kind;
         parent : NetFrameworkBase.System.Diagnostics.SymbolStore.SymbolToken.Kind;
         name : NetFrameworkBase.BSTR;
         data : NetFrameworkBase.Byte_Array
      ) return HResult is abstract;
      
      function OpenNamespace
      (
         this : in out ISymbolWriter.Kind;
         name : NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function CloseNamespace
      (
         this : in out ISymbolWriter.Kind
      ) return HResult is abstract;
      
      function UsingNamespace
      (
         this : in out ISymbolWriter.Kind;
         fullName : NetFrameworkBase.BSTR
      ) return HResult is abstract;
      
      function SetMethodSourceRange
      (
         this : in out ISymbolWriter.Kind;
         startDoc : NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter.Kind_Ptr;
         startLine : NetFrameworkBase.Int32;
         startColumn : NetFrameworkBase.Int32;
         endDoc : NetFrameworkBase.System.Diagnostics.SymbolStore.ISymbolDocumentWriter.Kind_Ptr;
         endLine : NetFrameworkBase.Int32;
         endColumn : NetFrameworkBase.Int32
      ) return HResult is abstract;
      
      function SetUnderlyingWriter
      (
         this : in out ISymbolWriter.Kind;
         underlyingWriter : NetFrameworkBase.IntPtr
      ) return HResult is abstract;
      
   private
   
      This_AssemblyFile : constant Standard.Wide_String := "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorlib.dll";
      This_AssemblyName : constant Standard.Wide_String := "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
      This_TypeName     : constant Standard.Wide_String := "System.Diagnostics.SymbolStore.ISymbolWriter";
   
end;
